// source: device/device.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.device.BackendMessage', null, global);
goog.exportSymbol('proto.device.BackendMessage.Configure', null, global);
goog.exportSymbol('proto.device.BackendMessage.PayloadCase', null, global);
goog.exportSymbol('proto.device.BackendMessage.Ping', null, global);
goog.exportSymbol('proto.device.ClientMessage', null, global);
goog.exportSymbol('proto.device.ClientMessage.BleScan', null, global);
goog.exportSymbol('proto.device.ClientMessage.BleScan.Eddystone', null, global);
goog.exportSymbol('proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData', null, global);
goog.exportSymbol('proto.device.ClientMessage.BleScan.IBeacon', null, global);
goog.exportSymbol('proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData', null, global);
goog.exportSymbol('proto.device.ClientMessage.BleScan.ResultsCase', null, global);
goog.exportSymbol('proto.device.ClientMessage.Discovery', null, global);
goog.exportSymbol('proto.device.ClientMessage.PayloadCase', null, global);
goog.exportSymbol('proto.device.ClientType', null, global);
goog.exportSymbol('proto.device.GatewayFeature', null, global);
goog.exportSymbol('proto.device.GatewayFeature.Ble', null, global);
goog.exportSymbol('proto.device.GatewayFeature.ConfigCase', null, global);
goog.exportSymbol('proto.device.GatewayFeature.KeepAlive', null, global);
goog.exportSymbol('proto.device.GatewayFeature.KeepAlive.OnTimeout', null, global);
goog.exportSymbol('proto.device.GatewayFeature.Log', null, global);
goog.exportSymbol('proto.device.GatewayFeature.Log.Level', null, global);
goog.exportSymbol('proto.device.GatewayFeature.Mqtt', null, global);
goog.exportSymbol('proto.device.GatewayFeature.Ota', null, global);
goog.exportSymbol('proto.device.GatewayFeature.Sntp', null, global);
goog.exportSymbol('proto.device.GatewayFeature.Wifi', null, global);
goog.exportSymbol('proto.device.Message', null, global);
goog.exportSymbol('proto.device.Message.PayloadCase', null, global);
goog.exportSymbol('proto.device.MessageAck', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.GatewayFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.device.GatewayFeature.oneofGroups_);
};
goog.inherits(proto.device.GatewayFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.GatewayFeature.displayName = 'proto.device.GatewayFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.GatewayFeature.Mqtt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.device.GatewayFeature.Mqtt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.GatewayFeature.Mqtt.displayName = 'proto.device.GatewayFeature.Mqtt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.GatewayFeature.Wifi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.device.GatewayFeature.Wifi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.GatewayFeature.Wifi.displayName = 'proto.device.GatewayFeature.Wifi';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.GatewayFeature.Sntp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.device.GatewayFeature.Sntp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.GatewayFeature.Sntp.displayName = 'proto.device.GatewayFeature.Sntp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.GatewayFeature.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.device.GatewayFeature.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.GatewayFeature.Log.displayName = 'proto.device.GatewayFeature.Log';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.GatewayFeature.Ota = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.device.GatewayFeature.Ota, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.GatewayFeature.Ota.displayName = 'proto.device.GatewayFeature.Ota';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.GatewayFeature.KeepAlive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.device.GatewayFeature.KeepAlive, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.GatewayFeature.KeepAlive.displayName = 'proto.device.GatewayFeature.KeepAlive';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.GatewayFeature.Ble = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.device.GatewayFeature.Ble, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.GatewayFeature.Ble.displayName = 'proto.device.GatewayFeature.Ble';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.ClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.device.ClientMessage.oneofGroups_);
};
goog.inherits(proto.device.ClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.ClientMessage.displayName = 'proto.device.ClientMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.ClientMessage.Discovery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.device.ClientMessage.Discovery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.ClientMessage.Discovery.displayName = 'proto.device.ClientMessage.Discovery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.ClientMessage.BleScan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.device.ClientMessage.BleScan.oneofGroups_);
};
goog.inherits(proto.device.ClientMessage.BleScan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.ClientMessage.BleScan.displayName = 'proto.device.ClientMessage.BleScan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.ClientMessage.BleScan.IBeacon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.device.ClientMessage.BleScan.IBeacon.repeatedFields_, null);
};
goog.inherits(proto.device.ClientMessage.BleScan.IBeacon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.ClientMessage.BleScan.IBeacon.displayName = 'proto.device.ClientMessage.BleScan.IBeacon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.displayName = 'proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.ClientMessage.BleScan.Eddystone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.device.ClientMessage.BleScan.Eddystone.repeatedFields_, null);
};
goog.inherits(proto.device.ClientMessage.BleScan.Eddystone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.ClientMessage.BleScan.Eddystone.displayName = 'proto.device.ClientMessage.BleScan.Eddystone';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData.displayName = 'proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.BackendMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.device.BackendMessage.oneofGroups_);
};
goog.inherits(proto.device.BackendMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.BackendMessage.displayName = 'proto.device.BackendMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.BackendMessage.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.device.BackendMessage.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.BackendMessage.Ping.displayName = 'proto.device.BackendMessage.Ping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.BackendMessage.Configure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.device.BackendMessage.Configure.repeatedFields_, null);
};
goog.inherits(proto.device.BackendMessage.Configure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.BackendMessage.Configure.displayName = 'proto.device.BackendMessage.Configure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.device.Message.oneofGroups_);
};
goog.inherits(proto.device.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.Message.displayName = 'proto.device.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.device.MessageAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.device.MessageAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.device.MessageAck.displayName = 'proto.device.MessageAck';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.device.GatewayFeature.oneofGroups_ = [[1,2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.device.GatewayFeature.ConfigCase = {
  CONFIG_NOT_SET: 0,
  MQTT: 1,
  WIFI: 2,
  SNTP: 3,
  LOG: 4,
  OTA: 5,
  KEEP_ALIVE: 6,
  BLE: 7
};

/**
 * @return {proto.device.GatewayFeature.ConfigCase}
 */
proto.device.GatewayFeature.prototype.getConfigCase = function() {
  return /** @type {proto.device.GatewayFeature.ConfigCase} */(jspb.Message.computeOneofCase(this, proto.device.GatewayFeature.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.GatewayFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.device.GatewayFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.GatewayFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.GatewayFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    mqtt: (f = msg.getMqtt()) && proto.device.GatewayFeature.Mqtt.toObject(includeInstance, f),
    wifi: (f = msg.getWifi()) && proto.device.GatewayFeature.Wifi.toObject(includeInstance, f),
    sntp: (f = msg.getSntp()) && proto.device.GatewayFeature.Sntp.toObject(includeInstance, f),
    log: (f = msg.getLog()) && proto.device.GatewayFeature.Log.toObject(includeInstance, f),
    ota: (f = msg.getOta()) && proto.device.GatewayFeature.Ota.toObject(includeInstance, f),
    keepAlive: (f = msg.getKeepAlive()) && proto.device.GatewayFeature.KeepAlive.toObject(includeInstance, f),
    ble: (f = msg.getBle()) && proto.device.GatewayFeature.Ble.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.GatewayFeature}
 */
proto.device.GatewayFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.GatewayFeature;
  return proto.device.GatewayFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.GatewayFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.GatewayFeature}
 */
proto.device.GatewayFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.device.GatewayFeature.Mqtt;
      reader.readMessage(value,proto.device.GatewayFeature.Mqtt.deserializeBinaryFromReader);
      msg.setMqtt(value);
      break;
    case 2:
      var value = new proto.device.GatewayFeature.Wifi;
      reader.readMessage(value,proto.device.GatewayFeature.Wifi.deserializeBinaryFromReader);
      msg.setWifi(value);
      break;
    case 3:
      var value = new proto.device.GatewayFeature.Sntp;
      reader.readMessage(value,proto.device.GatewayFeature.Sntp.deserializeBinaryFromReader);
      msg.setSntp(value);
      break;
    case 4:
      var value = new proto.device.GatewayFeature.Log;
      reader.readMessage(value,proto.device.GatewayFeature.Log.deserializeBinaryFromReader);
      msg.setLog(value);
      break;
    case 5:
      var value = new proto.device.GatewayFeature.Ota;
      reader.readMessage(value,proto.device.GatewayFeature.Ota.deserializeBinaryFromReader);
      msg.setOta(value);
      break;
    case 6:
      var value = new proto.device.GatewayFeature.KeepAlive;
      reader.readMessage(value,proto.device.GatewayFeature.KeepAlive.deserializeBinaryFromReader);
      msg.setKeepAlive(value);
      break;
    case 7:
      var value = new proto.device.GatewayFeature.Ble;
      reader.readMessage(value,proto.device.GatewayFeature.Ble.deserializeBinaryFromReader);
      msg.setBle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.GatewayFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.GatewayFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.GatewayFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.GatewayFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMqtt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.device.GatewayFeature.Mqtt.serializeBinaryToWriter
    );
  }
  f = message.getWifi();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.device.GatewayFeature.Wifi.serializeBinaryToWriter
    );
  }
  f = message.getSntp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.device.GatewayFeature.Sntp.serializeBinaryToWriter
    );
  }
  f = message.getLog();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.device.GatewayFeature.Log.serializeBinaryToWriter
    );
  }
  f = message.getOta();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.device.GatewayFeature.Ota.serializeBinaryToWriter
    );
  }
  f = message.getKeepAlive();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.device.GatewayFeature.KeepAlive.serializeBinaryToWriter
    );
  }
  f = message.getBle();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.device.GatewayFeature.Ble.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.GatewayFeature.Mqtt.prototype.toObject = function(opt_includeInstance) {
  return proto.device.GatewayFeature.Mqtt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.GatewayFeature.Mqtt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.GatewayFeature.Mqtt.toObject = function(includeInstance, msg) {
  var f, obj = {
    uri: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, ""),
    username: jspb.Message.getFieldWithDefault(msg, 3, ""),
    password: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.GatewayFeature.Mqtt}
 */
proto.device.GatewayFeature.Mqtt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.GatewayFeature.Mqtt;
  return proto.device.GatewayFeature.Mqtt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.GatewayFeature.Mqtt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.GatewayFeature.Mqtt}
 */
proto.device.GatewayFeature.Mqtt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.GatewayFeature.Mqtt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.GatewayFeature.Mqtt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.GatewayFeature.Mqtt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.GatewayFeature.Mqtt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string uri = 1;
 * @return {string}
 */
proto.device.GatewayFeature.Mqtt.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.device.GatewayFeature.Mqtt} returns this
 */
proto.device.GatewayFeature.Mqtt.prototype.setUri = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string port = 2;
 * @return {string}
 */
proto.device.GatewayFeature.Mqtt.prototype.getPort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.device.GatewayFeature.Mqtt} returns this
 */
proto.device.GatewayFeature.Mqtt.prototype.setPort = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.device.GatewayFeature.Mqtt.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.device.GatewayFeature.Mqtt} returns this
 */
proto.device.GatewayFeature.Mqtt.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string password = 4;
 * @return {string}
 */
proto.device.GatewayFeature.Mqtt.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.device.GatewayFeature.Mqtt} returns this
 */
proto.device.GatewayFeature.Mqtt.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.GatewayFeature.Wifi.prototype.toObject = function(opt_includeInstance) {
  return proto.device.GatewayFeature.Wifi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.GatewayFeature.Wifi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.GatewayFeature.Wifi.toObject = function(includeInstance, msg) {
  var f, obj = {
    ssid: jspb.Message.getFieldWithDefault(msg, 10, ""),
    password: jspb.Message.getFieldWithDefault(msg, 11, ""),
    maxRetry: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.GatewayFeature.Wifi}
 */
proto.device.GatewayFeature.Wifi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.GatewayFeature.Wifi;
  return proto.device.GatewayFeature.Wifi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.GatewayFeature.Wifi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.GatewayFeature.Wifi}
 */
proto.device.GatewayFeature.Wifi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSsid(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxRetry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.GatewayFeature.Wifi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.GatewayFeature.Wifi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.GatewayFeature.Wifi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.GatewayFeature.Wifi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSsid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getMaxRetry();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
};


/**
 * optional string ssid = 10;
 * @return {string}
 */
proto.device.GatewayFeature.Wifi.prototype.getSsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.device.GatewayFeature.Wifi} returns this
 */
proto.device.GatewayFeature.Wifi.prototype.setSsid = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string password = 11;
 * @return {string}
 */
proto.device.GatewayFeature.Wifi.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.device.GatewayFeature.Wifi} returns this
 */
proto.device.GatewayFeature.Wifi.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional uint32 max_retry = 12;
 * @return {number}
 */
proto.device.GatewayFeature.Wifi.prototype.getMaxRetry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.device.GatewayFeature.Wifi} returns this
 */
proto.device.GatewayFeature.Wifi.prototype.setMaxRetry = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.GatewayFeature.Sntp.prototype.toObject = function(opt_includeInstance) {
  return proto.device.GatewayFeature.Sntp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.GatewayFeature.Sntp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.GatewayFeature.Sntp.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverUrl: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.GatewayFeature.Sntp}
 */
proto.device.GatewayFeature.Sntp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.GatewayFeature.Sntp;
  return proto.device.GatewayFeature.Sntp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.GatewayFeature.Sntp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.GatewayFeature.Sntp}
 */
proto.device.GatewayFeature.Sntp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.GatewayFeature.Sntp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.GatewayFeature.Sntp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.GatewayFeature.Sntp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.GatewayFeature.Sntp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string server_url = 1;
 * @return {string}
 */
proto.device.GatewayFeature.Sntp.prototype.getServerUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.device.GatewayFeature.Sntp} returns this
 */
proto.device.GatewayFeature.Sntp.prototype.setServerUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.GatewayFeature.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.device.GatewayFeature.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.GatewayFeature.Log} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.GatewayFeature.Log.toObject = function(includeInstance, msg) {
  var f, obj = {
    level: jspb.Message.getFieldWithDefault(msg, 1, 0),
    udpHost: jspb.Message.getFieldWithDefault(msg, 2, ""),
    udpPort: jspb.Message.getFieldWithDefault(msg, 3, ""),
    udpEnable: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.GatewayFeature.Log}
 */
proto.device.GatewayFeature.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.GatewayFeature.Log;
  return proto.device.GatewayFeature.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.GatewayFeature.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.GatewayFeature.Log}
 */
proto.device.GatewayFeature.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.device.GatewayFeature.Log.Level} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUdpHost(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUdpPort(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUdpEnable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.GatewayFeature.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.GatewayFeature.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.GatewayFeature.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.GatewayFeature.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUdpHost();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUdpPort();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUdpEnable();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.device.GatewayFeature.Log.Level = {
  UNDEFINED: 0,
  ERROR: 1,
  INFO: 2,
  DEBUG: 3
};

/**
 * optional Level level = 1;
 * @return {!proto.device.GatewayFeature.Log.Level}
 */
proto.device.GatewayFeature.Log.prototype.getLevel = function() {
  return /** @type {!proto.device.GatewayFeature.Log.Level} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.device.GatewayFeature.Log.Level} value
 * @return {!proto.device.GatewayFeature.Log} returns this
 */
proto.device.GatewayFeature.Log.prototype.setLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string udp_host = 2;
 * @return {string}
 */
proto.device.GatewayFeature.Log.prototype.getUdpHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.device.GatewayFeature.Log} returns this
 */
proto.device.GatewayFeature.Log.prototype.setUdpHost = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string udp_port = 3;
 * @return {string}
 */
proto.device.GatewayFeature.Log.prototype.getUdpPort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.device.GatewayFeature.Log} returns this
 */
proto.device.GatewayFeature.Log.prototype.setUdpPort = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool udp_enable = 4;
 * @return {boolean}
 */
proto.device.GatewayFeature.Log.prototype.getUdpEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.device.GatewayFeature.Log} returns this
 */
proto.device.GatewayFeature.Log.prototype.setUdpEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.GatewayFeature.Ota.prototype.toObject = function(opt_includeInstance) {
  return proto.device.GatewayFeature.Ota.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.GatewayFeature.Ota} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.GatewayFeature.Ota.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeout: jspb.Message.getFieldWithDefault(msg, 1, 0),
    url: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.GatewayFeature.Ota}
 */
proto.device.GatewayFeature.Ota.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.GatewayFeature.Ota;
  return proto.device.GatewayFeature.Ota.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.GatewayFeature.Ota} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.GatewayFeature.Ota}
 */
proto.device.GatewayFeature.Ota.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeout(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.GatewayFeature.Ota.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.GatewayFeature.Ota.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.GatewayFeature.Ota} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.GatewayFeature.Ota.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 timeout = 1;
 * @return {number}
 */
proto.device.GatewayFeature.Ota.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.device.GatewayFeature.Ota} returns this
 */
proto.device.GatewayFeature.Ota.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.device.GatewayFeature.Ota.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.device.GatewayFeature.Ota} returns this
 */
proto.device.GatewayFeature.Ota.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.GatewayFeature.KeepAlive.prototype.toObject = function(opt_includeInstance) {
  return proto.device.GatewayFeature.KeepAlive.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.GatewayFeature.KeepAlive} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.GatewayFeature.KeepAlive.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeout: jspb.Message.getFieldWithDefault(msg, 1, 0),
    onTimeout: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.GatewayFeature.KeepAlive}
 */
proto.device.GatewayFeature.KeepAlive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.GatewayFeature.KeepAlive;
  return proto.device.GatewayFeature.KeepAlive.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.GatewayFeature.KeepAlive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.GatewayFeature.KeepAlive}
 */
proto.device.GatewayFeature.KeepAlive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeout(value);
      break;
    case 2:
      var value = /** @type {!proto.device.GatewayFeature.KeepAlive.OnTimeout} */ (reader.readEnum());
      msg.setOnTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.GatewayFeature.KeepAlive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.GatewayFeature.KeepAlive.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.GatewayFeature.KeepAlive} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.GatewayFeature.KeepAlive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getOnTimeout();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.device.GatewayFeature.KeepAlive.OnTimeout = {
  UNDEFINED: 0,
  RESTART: 1,
  IGNORE: 2
};

/**
 * optional uint32 timeout = 1;
 * @return {number}
 */
proto.device.GatewayFeature.KeepAlive.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.device.GatewayFeature.KeepAlive} returns this
 */
proto.device.GatewayFeature.KeepAlive.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional OnTimeout on_timeout = 2;
 * @return {!proto.device.GatewayFeature.KeepAlive.OnTimeout}
 */
proto.device.GatewayFeature.KeepAlive.prototype.getOnTimeout = function() {
  return /** @type {!proto.device.GatewayFeature.KeepAlive.OnTimeout} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.device.GatewayFeature.KeepAlive.OnTimeout} value
 * @return {!proto.device.GatewayFeature.KeepAlive} returns this
 */
proto.device.GatewayFeature.KeepAlive.prototype.setOnTimeout = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.GatewayFeature.Ble.prototype.toObject = function(opt_includeInstance) {
  return proto.device.GatewayFeature.Ble.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.GatewayFeature.Ble} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.GatewayFeature.Ble.toObject = function(includeInstance, msg) {
  var f, obj = {
    scanDuration: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scanInterval: jspb.Message.getFieldWithDefault(msg, 2, 0),
    scanWindow: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.GatewayFeature.Ble}
 */
proto.device.GatewayFeature.Ble.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.GatewayFeature.Ble;
  return proto.device.GatewayFeature.Ble.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.GatewayFeature.Ble} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.GatewayFeature.Ble}
 */
proto.device.GatewayFeature.Ble.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScanDuration(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScanInterval(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScanWindow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.GatewayFeature.Ble.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.GatewayFeature.Ble.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.GatewayFeature.Ble} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.GatewayFeature.Ble.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScanDuration();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getScanInterval();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getScanWindow();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 scan_duration = 1;
 * @return {number}
 */
proto.device.GatewayFeature.Ble.prototype.getScanDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.device.GatewayFeature.Ble} returns this
 */
proto.device.GatewayFeature.Ble.prototype.setScanDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 scan_interval = 2;
 * @return {number}
 */
proto.device.GatewayFeature.Ble.prototype.getScanInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.device.GatewayFeature.Ble} returns this
 */
proto.device.GatewayFeature.Ble.prototype.setScanInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 scan_window = 3;
 * @return {number}
 */
proto.device.GatewayFeature.Ble.prototype.getScanWindow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.device.GatewayFeature.Ble} returns this
 */
proto.device.GatewayFeature.Ble.prototype.setScanWindow = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Mqtt mqtt = 1;
 * @return {?proto.device.GatewayFeature.Mqtt}
 */
proto.device.GatewayFeature.prototype.getMqtt = function() {
  return /** @type{?proto.device.GatewayFeature.Mqtt} */ (
    jspb.Message.getWrapperField(this, proto.device.GatewayFeature.Mqtt, 1));
};


/**
 * @param {?proto.device.GatewayFeature.Mqtt|undefined} value
 * @return {!proto.device.GatewayFeature} returns this
*/
proto.device.GatewayFeature.prototype.setMqtt = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.device.GatewayFeature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.GatewayFeature} returns this
 */
proto.device.GatewayFeature.prototype.clearMqtt = function() {
  return this.setMqtt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.GatewayFeature.prototype.hasMqtt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Wifi wifi = 2;
 * @return {?proto.device.GatewayFeature.Wifi}
 */
proto.device.GatewayFeature.prototype.getWifi = function() {
  return /** @type{?proto.device.GatewayFeature.Wifi} */ (
    jspb.Message.getWrapperField(this, proto.device.GatewayFeature.Wifi, 2));
};


/**
 * @param {?proto.device.GatewayFeature.Wifi|undefined} value
 * @return {!proto.device.GatewayFeature} returns this
*/
proto.device.GatewayFeature.prototype.setWifi = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.device.GatewayFeature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.GatewayFeature} returns this
 */
proto.device.GatewayFeature.prototype.clearWifi = function() {
  return this.setWifi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.GatewayFeature.prototype.hasWifi = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Sntp sntp = 3;
 * @return {?proto.device.GatewayFeature.Sntp}
 */
proto.device.GatewayFeature.prototype.getSntp = function() {
  return /** @type{?proto.device.GatewayFeature.Sntp} */ (
    jspb.Message.getWrapperField(this, proto.device.GatewayFeature.Sntp, 3));
};


/**
 * @param {?proto.device.GatewayFeature.Sntp|undefined} value
 * @return {!proto.device.GatewayFeature} returns this
*/
proto.device.GatewayFeature.prototype.setSntp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.device.GatewayFeature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.GatewayFeature} returns this
 */
proto.device.GatewayFeature.prototype.clearSntp = function() {
  return this.setSntp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.GatewayFeature.prototype.hasSntp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Log log = 4;
 * @return {?proto.device.GatewayFeature.Log}
 */
proto.device.GatewayFeature.prototype.getLog = function() {
  return /** @type{?proto.device.GatewayFeature.Log} */ (
    jspb.Message.getWrapperField(this, proto.device.GatewayFeature.Log, 4));
};


/**
 * @param {?proto.device.GatewayFeature.Log|undefined} value
 * @return {!proto.device.GatewayFeature} returns this
*/
proto.device.GatewayFeature.prototype.setLog = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.device.GatewayFeature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.GatewayFeature} returns this
 */
proto.device.GatewayFeature.prototype.clearLog = function() {
  return this.setLog(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.GatewayFeature.prototype.hasLog = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Ota ota = 5;
 * @return {?proto.device.GatewayFeature.Ota}
 */
proto.device.GatewayFeature.prototype.getOta = function() {
  return /** @type{?proto.device.GatewayFeature.Ota} */ (
    jspb.Message.getWrapperField(this, proto.device.GatewayFeature.Ota, 5));
};


/**
 * @param {?proto.device.GatewayFeature.Ota|undefined} value
 * @return {!proto.device.GatewayFeature} returns this
*/
proto.device.GatewayFeature.prototype.setOta = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.device.GatewayFeature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.GatewayFeature} returns this
 */
proto.device.GatewayFeature.prototype.clearOta = function() {
  return this.setOta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.GatewayFeature.prototype.hasOta = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional KeepAlive keep_alive = 6;
 * @return {?proto.device.GatewayFeature.KeepAlive}
 */
proto.device.GatewayFeature.prototype.getKeepAlive = function() {
  return /** @type{?proto.device.GatewayFeature.KeepAlive} */ (
    jspb.Message.getWrapperField(this, proto.device.GatewayFeature.KeepAlive, 6));
};


/**
 * @param {?proto.device.GatewayFeature.KeepAlive|undefined} value
 * @return {!proto.device.GatewayFeature} returns this
*/
proto.device.GatewayFeature.prototype.setKeepAlive = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.device.GatewayFeature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.GatewayFeature} returns this
 */
proto.device.GatewayFeature.prototype.clearKeepAlive = function() {
  return this.setKeepAlive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.GatewayFeature.prototype.hasKeepAlive = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Ble ble = 7;
 * @return {?proto.device.GatewayFeature.Ble}
 */
proto.device.GatewayFeature.prototype.getBle = function() {
  return /** @type{?proto.device.GatewayFeature.Ble} */ (
    jspb.Message.getWrapperField(this, proto.device.GatewayFeature.Ble, 7));
};


/**
 * @param {?proto.device.GatewayFeature.Ble|undefined} value
 * @return {!proto.device.GatewayFeature} returns this
*/
proto.device.GatewayFeature.prototype.setBle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.device.GatewayFeature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.GatewayFeature} returns this
 */
proto.device.GatewayFeature.prototype.clearBle = function() {
  return this.setBle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.GatewayFeature.prototype.hasBle = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.device.ClientMessage.oneofGroups_ = [[10,11]];

/**
 * @enum {number}
 */
proto.device.ClientMessage.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  DISCOVERY: 10,
  BLE_SCAN: 11
};

/**
 * @return {proto.device.ClientMessage.PayloadCase}
 */
proto.device.ClientMessage.prototype.getPayloadCase = function() {
  return /** @type {proto.device.ClientMessage.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.device.ClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.ClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.device.ClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.ClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.ClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deviceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    discovery: (f = msg.getDiscovery()) && proto.device.ClientMessage.Discovery.toObject(includeInstance, f),
    bleScan: (f = msg.getBleScan()) && proto.device.ClientMessage.BleScan.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.ClientMessage}
 */
proto.device.ClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.ClientMessage;
  return proto.device.ClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.ClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.ClientMessage}
 */
proto.device.ClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.device.ClientType} */ (reader.readEnum());
      msg.setClientType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 10:
      var value = new proto.device.ClientMessage.Discovery;
      reader.readMessage(value,proto.device.ClientMessage.Discovery.deserializeBinaryFromReader);
      msg.setDiscovery(value);
      break;
    case 11:
      var value = new proto.device.ClientMessage.BleScan;
      reader.readMessage(value,proto.device.ClientMessage.BleScan.deserializeBinaryFromReader);
      msg.setBleScan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.ClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.ClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.ClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.ClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDiscovery();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.device.ClientMessage.Discovery.serializeBinaryToWriter
    );
  }
  f = message.getBleScan();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.device.ClientMessage.BleScan.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.ClientMessage.Discovery.prototype.toObject = function(opt_includeInstance) {
  return proto.device.ClientMessage.Discovery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.ClientMessage.Discovery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.ClientMessage.Discovery.toObject = function(includeInstance, msg) {
  var f, obj = {
    softwareId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.ClientMessage.Discovery}
 */
proto.device.ClientMessage.Discovery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.ClientMessage.Discovery;
  return proto.device.ClientMessage.Discovery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.ClientMessage.Discovery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.ClientMessage.Discovery}
 */
proto.device.ClientMessage.Discovery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSoftwareId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.ClientMessage.Discovery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.ClientMessage.Discovery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.ClientMessage.Discovery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.ClientMessage.Discovery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoftwareId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 software_id = 1;
 * @return {number}
 */
proto.device.ClientMessage.Discovery.prototype.getSoftwareId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.device.ClientMessage.Discovery} returns this
 */
proto.device.ClientMessage.Discovery.prototype.setSoftwareId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.device.ClientMessage.BleScan.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.device.ClientMessage.BleScan.ResultsCase = {
  RESULTS_NOT_SET: 0,
  IBEACON: 3,
  EDDYSTONE: 4
};

/**
 * @return {proto.device.ClientMessage.BleScan.ResultsCase}
 */
proto.device.ClientMessage.BleScan.prototype.getResultsCase = function() {
  return /** @type {proto.device.ClientMessage.BleScan.ResultsCase} */(jspb.Message.computeOneofCase(this, proto.device.ClientMessage.BleScan.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.ClientMessage.BleScan.prototype.toObject = function(opt_includeInstance) {
  return proto.device.ClientMessage.BleScan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.ClientMessage.BleScan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.ClientMessage.BleScan.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    ibeacon: (f = msg.getIbeacon()) && proto.device.ClientMessage.BleScan.IBeacon.toObject(includeInstance, f),
    eddystone: (f = msg.getEddystone()) && proto.device.ClientMessage.BleScan.Eddystone.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.ClientMessage.BleScan}
 */
proto.device.ClientMessage.BleScan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.ClientMessage.BleScan;
  return proto.device.ClientMessage.BleScan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.ClientMessage.BleScan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.ClientMessage.BleScan}
 */
proto.device.ClientMessage.BleScan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 3:
      var value = new proto.device.ClientMessage.BleScan.IBeacon;
      reader.readMessage(value,proto.device.ClientMessage.BleScan.IBeacon.deserializeBinaryFromReader);
      msg.setIbeacon(value);
      break;
    case 4:
      var value = new proto.device.ClientMessage.BleScan.Eddystone;
      reader.readMessage(value,proto.device.ClientMessage.BleScan.Eddystone.deserializeBinaryFromReader);
      msg.setEddystone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.ClientMessage.BleScan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.ClientMessage.BleScan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.ClientMessage.BleScan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.ClientMessage.BleScan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getIbeacon();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.device.ClientMessage.BleScan.IBeacon.serializeBinaryToWriter
    );
  }
  f = message.getEddystone();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.device.ClientMessage.BleScan.Eddystone.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.device.ClientMessage.BleScan.IBeacon.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.ClientMessage.BleScan.IBeacon.prototype.toObject = function(opt_includeInstance) {
  return proto.device.ClientMessage.BleScan.IBeacon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.ClientMessage.BleScan.IBeacon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.ClientMessage.BleScan.IBeacon.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.ClientMessage.BleScan.IBeacon}
 */
proto.device.ClientMessage.BleScan.IBeacon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.ClientMessage.BleScan.IBeacon;
  return proto.device.ClientMessage.BleScan.IBeacon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.ClientMessage.BleScan.IBeacon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.ClientMessage.BleScan.IBeacon}
 */
proto.device.ClientMessage.BleScan.IBeacon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData;
      reader.readMessage(value,proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.ClientMessage.BleScan.IBeacon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.ClientMessage.BleScan.IBeacon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.ClientMessage.BleScan.IBeacon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.ClientMessage.BleScan.IBeacon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.prototype.toObject = function(opt_includeInstance) {
  return proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.toObject = function(includeInstance, msg) {
  var f, obj = {
    major: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minor: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rssi: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData}
 */
proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData;
  return proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData}
 */
proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMajor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRssi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMajor();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMinor();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRssi();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional uint32 major = 1;
 * @return {number}
 */
proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.prototype.getMajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData} returns this
 */
proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.prototype.setMajor = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 minor = 2;
 * @return {number}
 */
proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.prototype.getMinor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData} returns this
 */
proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.prototype.setMinor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 rssi = 3;
 * @return {number}
 */
proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData} returns this
 */
proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData.prototype.setRssi = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated AdvertisingData data = 1;
 * @return {!Array<!proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData>}
 */
proto.device.ClientMessage.BleScan.IBeacon.prototype.getDataList = function() {
  return /** @type{!Array<!proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData, 1));
};


/**
 * @param {!Array<!proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData>} value
 * @return {!proto.device.ClientMessage.BleScan.IBeacon} returns this
*/
proto.device.ClientMessage.BleScan.IBeacon.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData}
 */
proto.device.ClientMessage.BleScan.IBeacon.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.device.ClientMessage.BleScan.IBeacon.AdvertisingData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.device.ClientMessage.BleScan.IBeacon} returns this
 */
proto.device.ClientMessage.BleScan.IBeacon.prototype.clearDataList = function() {
  return this.setDataList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.device.ClientMessage.BleScan.Eddystone.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.ClientMessage.BleScan.Eddystone.prototype.toObject = function(opt_includeInstance) {
  return proto.device.ClientMessage.BleScan.Eddystone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.ClientMessage.BleScan.Eddystone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.ClientMessage.BleScan.Eddystone.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.ClientMessage.BleScan.Eddystone}
 */
proto.device.ClientMessage.BleScan.Eddystone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.ClientMessage.BleScan.Eddystone;
  return proto.device.ClientMessage.BleScan.Eddystone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.ClientMessage.BleScan.Eddystone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.ClientMessage.BleScan.Eddystone}
 */
proto.device.ClientMessage.BleScan.Eddystone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData;
      reader.readMessage(value,proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.ClientMessage.BleScan.Eddystone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.ClientMessage.BleScan.Eddystone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.ClientMessage.BleScan.Eddystone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.ClientMessage.BleScan.Eddystone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData.prototype.toObject = function(opt_includeInstance) {
  return proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData}
 */
proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData;
  return proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData}
 */
proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * repeated AdvertisingData data = 1;
 * @return {!Array<!proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData>}
 */
proto.device.ClientMessage.BleScan.Eddystone.prototype.getDataList = function() {
  return /** @type{!Array<!proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData, 1));
};


/**
 * @param {!Array<!proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData>} value
 * @return {!proto.device.ClientMessage.BleScan.Eddystone} returns this
*/
proto.device.ClientMessage.BleScan.Eddystone.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData}
 */
proto.device.ClientMessage.BleScan.Eddystone.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.device.ClientMessage.BleScan.Eddystone.AdvertisingData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.device.ClientMessage.BleScan.Eddystone} returns this
 */
proto.device.ClientMessage.BleScan.Eddystone.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional google.protobuf.Timestamp timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.device.ClientMessage.BleScan.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.device.ClientMessage.BleScan} returns this
*/
proto.device.ClientMessage.BleScan.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.ClientMessage.BleScan} returns this
 */
proto.device.ClientMessage.BleScan.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.ClientMessage.BleScan.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional IBeacon ibeacon = 3;
 * @return {?proto.device.ClientMessage.BleScan.IBeacon}
 */
proto.device.ClientMessage.BleScan.prototype.getIbeacon = function() {
  return /** @type{?proto.device.ClientMessage.BleScan.IBeacon} */ (
    jspb.Message.getWrapperField(this, proto.device.ClientMessage.BleScan.IBeacon, 3));
};


/**
 * @param {?proto.device.ClientMessage.BleScan.IBeacon|undefined} value
 * @return {!proto.device.ClientMessage.BleScan} returns this
*/
proto.device.ClientMessage.BleScan.prototype.setIbeacon = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.device.ClientMessage.BleScan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.ClientMessage.BleScan} returns this
 */
proto.device.ClientMessage.BleScan.prototype.clearIbeacon = function() {
  return this.setIbeacon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.ClientMessage.BleScan.prototype.hasIbeacon = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Eddystone eddystone = 4;
 * @return {?proto.device.ClientMessage.BleScan.Eddystone}
 */
proto.device.ClientMessage.BleScan.prototype.getEddystone = function() {
  return /** @type{?proto.device.ClientMessage.BleScan.Eddystone} */ (
    jspb.Message.getWrapperField(this, proto.device.ClientMessage.BleScan.Eddystone, 4));
};


/**
 * @param {?proto.device.ClientMessage.BleScan.Eddystone|undefined} value
 * @return {!proto.device.ClientMessage.BleScan} returns this
*/
proto.device.ClientMessage.BleScan.prototype.setEddystone = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.device.ClientMessage.BleScan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.ClientMessage.BleScan} returns this
 */
proto.device.ClientMessage.BleScan.prototype.clearEddystone = function() {
  return this.setEddystone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.ClientMessage.BleScan.prototype.hasEddystone = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ClientType client_type = 1;
 * @return {!proto.device.ClientType}
 */
proto.device.ClientMessage.prototype.getClientType = function() {
  return /** @type {!proto.device.ClientType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.device.ClientType} value
 * @return {!proto.device.ClientMessage} returns this
 */
proto.device.ClientMessage.prototype.setClientType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string device_id = 2;
 * @return {string}
 */
proto.device.ClientMessage.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.device.ClientMessage} returns this
 */
proto.device.ClientMessage.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Discovery discovery = 10;
 * @return {?proto.device.ClientMessage.Discovery}
 */
proto.device.ClientMessage.prototype.getDiscovery = function() {
  return /** @type{?proto.device.ClientMessage.Discovery} */ (
    jspb.Message.getWrapperField(this, proto.device.ClientMessage.Discovery, 10));
};


/**
 * @param {?proto.device.ClientMessage.Discovery|undefined} value
 * @return {!proto.device.ClientMessage} returns this
*/
proto.device.ClientMessage.prototype.setDiscovery = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.device.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.ClientMessage} returns this
 */
proto.device.ClientMessage.prototype.clearDiscovery = function() {
  return this.setDiscovery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.ClientMessage.prototype.hasDiscovery = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional BleScan ble_scan = 11;
 * @return {?proto.device.ClientMessage.BleScan}
 */
proto.device.ClientMessage.prototype.getBleScan = function() {
  return /** @type{?proto.device.ClientMessage.BleScan} */ (
    jspb.Message.getWrapperField(this, proto.device.ClientMessage.BleScan, 11));
};


/**
 * @param {?proto.device.ClientMessage.BleScan|undefined} value
 * @return {!proto.device.ClientMessage} returns this
*/
proto.device.ClientMessage.prototype.setBleScan = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.device.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.ClientMessage} returns this
 */
proto.device.ClientMessage.prototype.clearBleScan = function() {
  return this.setBleScan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.ClientMessage.prototype.hasBleScan = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.device.BackendMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.device.BackendMessage.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  PING: 1,
  CONFIGURE: 2
};

/**
 * @return {proto.device.BackendMessage.PayloadCase}
 */
proto.device.BackendMessage.prototype.getPayloadCase = function() {
  return /** @type {proto.device.BackendMessage.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.device.BackendMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.BackendMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.device.BackendMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.BackendMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.BackendMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    ping: (f = msg.getPing()) && proto.device.BackendMessage.Ping.toObject(includeInstance, f),
    configure: (f = msg.getConfigure()) && proto.device.BackendMessage.Configure.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.BackendMessage}
 */
proto.device.BackendMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.BackendMessage;
  return proto.device.BackendMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.BackendMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.BackendMessage}
 */
proto.device.BackendMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.device.BackendMessage.Ping;
      reader.readMessage(value,proto.device.BackendMessage.Ping.deserializeBinaryFromReader);
      msg.setPing(value);
      break;
    case 2:
      var value = new proto.device.BackendMessage.Configure;
      reader.readMessage(value,proto.device.BackendMessage.Configure.deserializeBinaryFromReader);
      msg.setConfigure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.BackendMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.BackendMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.BackendMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.BackendMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPing();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.device.BackendMessage.Ping.serializeBinaryToWriter
    );
  }
  f = message.getConfigure();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.device.BackendMessage.Configure.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.BackendMessage.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.device.BackendMessage.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.BackendMessage.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.BackendMessage.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.BackendMessage.Ping}
 */
proto.device.BackendMessage.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.BackendMessage.Ping;
  return proto.device.BackendMessage.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.BackendMessage.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.BackendMessage.Ping}
 */
proto.device.BackendMessage.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.BackendMessage.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.BackendMessage.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.BackendMessage.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.BackendMessage.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.device.BackendMessage.Ping.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.device.BackendMessage.Ping} returns this
*/
proto.device.BackendMessage.Ping.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.BackendMessage.Ping} returns this
 */
proto.device.BackendMessage.Ping.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.BackendMessage.Ping.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.device.BackendMessage.Configure.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.BackendMessage.Configure.prototype.toObject = function(opt_includeInstance) {
  return proto.device.BackendMessage.Configure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.BackendMessage.Configure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.BackendMessage.Configure.toObject = function(includeInstance, msg) {
  var f, obj = {
    gatewayFeaturesList: jspb.Message.toObjectList(msg.getGatewayFeaturesList(),
    proto.device.GatewayFeature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.BackendMessage.Configure}
 */
proto.device.BackendMessage.Configure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.BackendMessage.Configure;
  return proto.device.BackendMessage.Configure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.BackendMessage.Configure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.BackendMessage.Configure}
 */
proto.device.BackendMessage.Configure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = new proto.device.GatewayFeature;
      reader.readMessage(value,proto.device.GatewayFeature.deserializeBinaryFromReader);
      msg.addGatewayFeatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.BackendMessage.Configure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.BackendMessage.Configure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.BackendMessage.Configure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.BackendMessage.Configure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGatewayFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.device.GatewayFeature.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GatewayFeature gateway_features = 10;
 * @return {!Array<!proto.device.GatewayFeature>}
 */
proto.device.BackendMessage.Configure.prototype.getGatewayFeaturesList = function() {
  return /** @type{!Array<!proto.device.GatewayFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.device.GatewayFeature, 10));
};


/**
 * @param {!Array<!proto.device.GatewayFeature>} value
 * @return {!proto.device.BackendMessage.Configure} returns this
*/
proto.device.BackendMessage.Configure.prototype.setGatewayFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.device.GatewayFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.device.GatewayFeature}
 */
proto.device.BackendMessage.Configure.prototype.addGatewayFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.device.GatewayFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.device.BackendMessage.Configure} returns this
 */
proto.device.BackendMessage.Configure.prototype.clearGatewayFeaturesList = function() {
  return this.setGatewayFeaturesList([]);
};


/**
 * optional Ping ping = 1;
 * @return {?proto.device.BackendMessage.Ping}
 */
proto.device.BackendMessage.prototype.getPing = function() {
  return /** @type{?proto.device.BackendMessage.Ping} */ (
    jspb.Message.getWrapperField(this, proto.device.BackendMessage.Ping, 1));
};


/**
 * @param {?proto.device.BackendMessage.Ping|undefined} value
 * @return {!proto.device.BackendMessage} returns this
*/
proto.device.BackendMessage.prototype.setPing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.device.BackendMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.BackendMessage} returns this
 */
proto.device.BackendMessage.prototype.clearPing = function() {
  return this.setPing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.BackendMessage.prototype.hasPing = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Configure configure = 2;
 * @return {?proto.device.BackendMessage.Configure}
 */
proto.device.BackendMessage.prototype.getConfigure = function() {
  return /** @type{?proto.device.BackendMessage.Configure} */ (
    jspb.Message.getWrapperField(this, proto.device.BackendMessage.Configure, 2));
};


/**
 * @param {?proto.device.BackendMessage.Configure|undefined} value
 * @return {!proto.device.BackendMessage} returns this
*/
proto.device.BackendMessage.prototype.setConfigure = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.device.BackendMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.BackendMessage} returns this
 */
proto.device.BackendMessage.prototype.clearConfigure = function() {
  return this.setConfigure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.BackendMessage.prototype.hasConfigure = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.device.Message.oneofGroups_ = [[10,11]];

/**
 * @enum {number}
 */
proto.device.Message.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CLIENT_MESSAGE: 10,
  BACKEND_MESSAGE: 11
};

/**
 * @return {proto.device.Message.PayloadCase}
 */
proto.device.Message.prototype.getPayloadCase = function() {
  return /** @type {proto.device.Message.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.device.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.device.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientMessage: (f = msg.getClientMessage()) && proto.device.ClientMessage.toObject(includeInstance, f),
    backendMessage: (f = msg.getBackendMessage()) && proto.device.BackendMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.Message}
 */
proto.device.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.Message;
  return proto.device.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.Message}
 */
proto.device.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 10:
      var value = new proto.device.ClientMessage;
      reader.readMessage(value,proto.device.ClientMessage.deserializeBinaryFromReader);
      msg.setClientMessage(value);
      break;
    case 11:
      var value = new proto.device.BackendMessage;
      reader.readMessage(value,proto.device.BackendMessage.deserializeBinaryFromReader);
      msg.setBackendMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientMessage();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.device.ClientMessage.serializeBinaryToWriter
    );
  }
  f = message.getBackendMessage();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.device.BackendMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.device.Message.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.device.Message} returns this
 */
proto.device.Message.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ClientMessage client_message = 10;
 * @return {?proto.device.ClientMessage}
 */
proto.device.Message.prototype.getClientMessage = function() {
  return /** @type{?proto.device.ClientMessage} */ (
    jspb.Message.getWrapperField(this, proto.device.ClientMessage, 10));
};


/**
 * @param {?proto.device.ClientMessage|undefined} value
 * @return {!proto.device.Message} returns this
*/
proto.device.Message.prototype.setClientMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.device.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.Message} returns this
 */
proto.device.Message.prototype.clearClientMessage = function() {
  return this.setClientMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.Message.prototype.hasClientMessage = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional BackendMessage backend_message = 11;
 * @return {?proto.device.BackendMessage}
 */
proto.device.Message.prototype.getBackendMessage = function() {
  return /** @type{?proto.device.BackendMessage} */ (
    jspb.Message.getWrapperField(this, proto.device.BackendMessage, 11));
};


/**
 * @param {?proto.device.BackendMessage|undefined} value
 * @return {!proto.device.Message} returns this
*/
proto.device.Message.prototype.setBackendMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.device.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.device.Message} returns this
 */
proto.device.Message.prototype.clearBackendMessage = function() {
  return this.setBackendMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.device.Message.prototype.hasBackendMessage = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.device.MessageAck.prototype.toObject = function(opt_includeInstance) {
  return proto.device.MessageAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.device.MessageAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.MessageAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.device.MessageAck}
 */
proto.device.MessageAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.device.MessageAck;
  return proto.device.MessageAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.device.MessageAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.device.MessageAck}
 */
proto.device.MessageAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMessageId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.device.MessageAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.device.MessageAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.device.MessageAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.device.MessageAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 message_id = 1;
 * @return {number}
 */
proto.device.MessageAck.prototype.getMessageId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.device.MessageAck} returns this
 */
proto.device.MessageAck.prototype.setMessageId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.device.ClientType = {
  UNDEFINED: 0,
  GATEWAY: 1
};

goog.object.extend(exports, proto.device);
