// source: gateway/gateway.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.gateway.GatewayCalibrateParams', null, global);
goog.exportSymbol('proto.gateway.GatewayCalibrationMessage', null, global);
goog.exportSymbol('proto.gateway.GatewayDiscoveryMessage', null, global);
goog.exportSymbol('proto.gateway.GatewayEventID', null, global);
goog.exportSymbol('proto.gateway.GatewayEventMessage', null, global);
goog.exportSymbol('proto.gateway.GatewayMessage', null, global);
goog.exportSymbol('proto.gateway.GatewayParams', null, global);
goog.exportSymbol('proto.gateway.GatewayResponseCode', null, global);
goog.exportSymbol('proto.gateway.GatewayScanType', null, global);
goog.exportSymbol('proto.gateway.GatewaySleepParams', null, global);
goog.exportSymbol('proto.gateway.GatewaySleepType', null, global);
goog.exportSymbol('proto.gateway.GatewayStatus', null, global);
goog.exportSymbol('proto.gateway.GatewayTaskID', null, global);
goog.exportSymbol('proto.gateway.GatewayTaskMessage', null, global);
goog.exportSymbol('proto.gateway.GatewayTaskMessage.PayloadCase', null, global);
goog.exportSymbol('proto.gateway.GatewayTaskResponseMessage', null, global);
goog.exportSymbol('proto.gateway.IBeaconTickMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.IBeaconTickMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.IBeaconTickMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.IBeaconTickMessage.displayName = 'proto.gateway.IBeaconTickMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.GatewayMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gateway.GatewayMessage.repeatedFields_, null);
};
goog.inherits(proto.gateway.GatewayMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.GatewayMessage.displayName = 'proto.gateway.GatewayMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.GatewayCalibrationMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gateway.GatewayCalibrationMessage.repeatedFields_, null);
};
goog.inherits(proto.gateway.GatewayCalibrationMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.GatewayCalibrationMessage.displayName = 'proto.gateway.GatewayCalibrationMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.GatewayDiscoveryMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.GatewayDiscoveryMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.GatewayDiscoveryMessage.displayName = 'proto.gateway.GatewayDiscoveryMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.GatewayEventMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.GatewayEventMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.GatewayEventMessage.displayName = 'proto.gateway.GatewayEventMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.GatewayTaskMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.gateway.GatewayTaskMessage.oneofGroups_);
};
goog.inherits(proto.gateway.GatewayTaskMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.GatewayTaskMessage.displayName = 'proto.gateway.GatewayTaskMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.GatewaySleepParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.GatewaySleepParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.GatewaySleepParams.displayName = 'proto.gateway.GatewaySleepParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.GatewayCalibrateParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gateway.GatewayCalibrateParams.repeatedFields_, null);
};
goog.inherits(proto.gateway.GatewayCalibrateParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.GatewayCalibrateParams.displayName = 'proto.gateway.GatewayCalibrateParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.GatewayTaskResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.GatewayTaskResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.GatewayTaskResponseMessage.displayName = 'proto.gateway.GatewayTaskResponseMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.GatewayParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.GatewayParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.GatewayParams.displayName = 'proto.gateway.GatewayParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.GatewayStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.GatewayStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.GatewayStatus.displayName = 'proto.gateway.GatewayStatus';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.IBeaconTickMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.IBeaconTickMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.IBeaconTickMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.IBeaconTickMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    major: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minor: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rssi: jspb.Message.getFieldWithDefault(msg, 3, 0),
    deltaUs: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.IBeaconTickMessage}
 */
proto.gateway.IBeaconTickMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.IBeaconTickMessage;
  return proto.gateway.IBeaconTickMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.IBeaconTickMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.IBeaconTickMessage}
 */
proto.gateway.IBeaconTickMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMajor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRssi(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeltaUs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.IBeaconTickMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.IBeaconTickMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.IBeaconTickMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.IBeaconTickMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMajor();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMinor();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRssi();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDeltaUs();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional uint32 major = 1;
 * @return {number}
 */
proto.gateway.IBeaconTickMessage.prototype.getMajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.IBeaconTickMessage} returns this
 */
proto.gateway.IBeaconTickMessage.prototype.setMajor = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 minor = 2;
 * @return {number}
 */
proto.gateway.IBeaconTickMessage.prototype.getMinor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.IBeaconTickMessage} returns this
 */
proto.gateway.IBeaconTickMessage.prototype.setMinor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 rssi = 3;
 * @return {number}
 */
proto.gateway.IBeaconTickMessage.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.IBeaconTickMessage} returns this
 */
proto.gateway.IBeaconTickMessage.prototype.setRssi = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 delta_us = 4;
 * @return {number}
 */
proto.gateway.IBeaconTickMessage.prototype.getDeltaUs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.IBeaconTickMessage} returns this
 */
proto.gateway.IBeaconTickMessage.prototype.setDeltaUs = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gateway.GatewayMessage.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.GatewayMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.GatewayMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.GatewayMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewayMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gatewayid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0),
    ticksList: jspb.Message.toObjectList(msg.getTicksList(),
    proto.gateway.IBeaconTickMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.GatewayMessage}
 */
proto.gateway.GatewayMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.GatewayMessage;
  return proto.gateway.GatewayMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.GatewayMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.GatewayMessage}
 */
proto.gateway.GatewayMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGatewayid(value);
      break;
    case 5:
      var value = /** @type {!proto.gateway.GatewayScanType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.gateway.IBeaconTickMessage;
      reader.readMessage(value,proto.gateway.IBeaconTickMessage.deserializeBinaryFromReader);
      msg.addTicks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.GatewayMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.GatewayMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.GatewayMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewayMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getGatewayid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getTicksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.gateway.IBeaconTickMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 status = 1;
 * @return {number}
 */
proto.gateway.GatewayMessage.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayMessage} returns this
 */
proto.gateway.GatewayMessage.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 timestamp = 2;
 * @return {number}
 */
proto.gateway.GatewayMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayMessage} returns this
 */
proto.gateway.GatewayMessage.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 gatewayID = 3;
 * @return {number}
 */
proto.gateway.GatewayMessage.prototype.getGatewayid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayMessage} returns this
 */
proto.gateway.GatewayMessage.prototype.setGatewayid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional GatewayScanType type = 5;
 * @return {!proto.gateway.GatewayScanType}
 */
proto.gateway.GatewayMessage.prototype.getType = function() {
  return /** @type {!proto.gateway.GatewayScanType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.gateway.GatewayScanType} value
 * @return {!proto.gateway.GatewayMessage} returns this
 */
proto.gateway.GatewayMessage.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * repeated IBeaconTickMessage ticks = 4;
 * @return {!Array<!proto.gateway.IBeaconTickMessage>}
 */
proto.gateway.GatewayMessage.prototype.getTicksList = function() {
  return /** @type{!Array<!proto.gateway.IBeaconTickMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gateway.IBeaconTickMessage, 4));
};


/**
 * @param {!Array<!proto.gateway.IBeaconTickMessage>} value
 * @return {!proto.gateway.GatewayMessage} returns this
*/
proto.gateway.GatewayMessage.prototype.setTicksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.gateway.IBeaconTickMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gateway.IBeaconTickMessage}
 */
proto.gateway.GatewayMessage.prototype.addTicks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.gateway.IBeaconTickMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.GatewayMessage} returns this
 */
proto.gateway.GatewayMessage.prototype.clearTicksList = function() {
  return this.setTicksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gateway.GatewayCalibrationMessage.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.GatewayCalibrationMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.GatewayCalibrationMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.GatewayCalibrationMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewayCalibrationMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gatewayid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    advertisinggatewayid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    rssi: jspb.Message.getFieldWithDefault(msg, 5, 0),
    count: jspb.Message.getFieldWithDefault(msg, 6, 0),
    rssimean: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    rssivariance: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    dataList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.GatewayCalibrationMessage}
 */
proto.gateway.GatewayCalibrationMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.GatewayCalibrationMessage;
  return proto.gateway.GatewayCalibrationMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.GatewayCalibrationMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.GatewayCalibrationMessage}
 */
proto.gateway.GatewayCalibrationMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGatewayid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAdvertisinggatewayid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRssi(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRssimean(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRssivariance(value);
      break;
    case 9:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setDataList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.GatewayCalibrationMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.GatewayCalibrationMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.GatewayCalibrationMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewayCalibrationMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getGatewayid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAdvertisinggatewayid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getRssi();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getRssimean();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getRssivariance();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writePackedInt32(
      9,
      f
    );
  }
};


/**
 * optional uint64 messageID = 1;
 * @return {number}
 */
proto.gateway.GatewayCalibrationMessage.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayCalibrationMessage} returns this
 */
proto.gateway.GatewayCalibrationMessage.prototype.setMessageid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 gatewayID = 2;
 * @return {number}
 */
proto.gateway.GatewayCalibrationMessage.prototype.getGatewayid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayCalibrationMessage} returns this
 */
proto.gateway.GatewayCalibrationMessage.prototype.setGatewayid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 advertisingGatewayID = 3;
 * @return {number}
 */
proto.gateway.GatewayCalibrationMessage.prototype.getAdvertisinggatewayid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayCalibrationMessage} returns this
 */
proto.gateway.GatewayCalibrationMessage.prototype.setAdvertisinggatewayid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 timestamp = 4;
 * @return {number}
 */
proto.gateway.GatewayCalibrationMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayCalibrationMessage} returns this
 */
proto.gateway.GatewayCalibrationMessage.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 rssi = 5;
 * @return {number}
 */
proto.gateway.GatewayCalibrationMessage.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayCalibrationMessage} returns this
 */
proto.gateway.GatewayCalibrationMessage.prototype.setRssi = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 count = 6;
 * @return {number}
 */
proto.gateway.GatewayCalibrationMessage.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayCalibrationMessage} returns this
 */
proto.gateway.GatewayCalibrationMessage.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional double rssiMean = 7;
 * @return {number}
 */
proto.gateway.GatewayCalibrationMessage.prototype.getRssimean = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayCalibrationMessage} returns this
 */
proto.gateway.GatewayCalibrationMessage.prototype.setRssimean = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double rssiVariance = 8;
 * @return {number}
 */
proto.gateway.GatewayCalibrationMessage.prototype.getRssivariance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayCalibrationMessage} returns this
 */
proto.gateway.GatewayCalibrationMessage.prototype.setRssivariance = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * repeated int32 data = 9;
 * @return {!Array<number>}
 */
proto.gateway.GatewayCalibrationMessage.prototype.getDataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.gateway.GatewayCalibrationMessage} returns this
 */
proto.gateway.GatewayCalibrationMessage.prototype.setDataList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.gateway.GatewayCalibrationMessage} returns this
 */
proto.gateway.GatewayCalibrationMessage.prototype.addData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.GatewayCalibrationMessage} returns this
 */
proto.gateway.GatewayCalibrationMessage.prototype.clearDataList = function() {
  return this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.GatewayDiscoveryMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.GatewayDiscoveryMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.GatewayDiscoveryMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewayDiscoveryMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gatewayid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    softwareversion: jspb.Message.getFieldWithDefault(msg, 3, ""),
    configId: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.GatewayDiscoveryMessage}
 */
proto.gateway.GatewayDiscoveryMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.GatewayDiscoveryMessage;
  return proto.gateway.GatewayDiscoveryMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.GatewayDiscoveryMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.GatewayDiscoveryMessage}
 */
proto.gateway.GatewayDiscoveryMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGatewayid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSoftwareversion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConfigId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.GatewayDiscoveryMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.GatewayDiscoveryMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.GatewayDiscoveryMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewayDiscoveryMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getGatewayid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSoftwareversion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getConfigId();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint64 messageID = 1;
 * @return {number}
 */
proto.gateway.GatewayDiscoveryMessage.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayDiscoveryMessage} returns this
 */
proto.gateway.GatewayDiscoveryMessage.prototype.setMessageid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 gatewayID = 2;
 * @return {number}
 */
proto.gateway.GatewayDiscoveryMessage.prototype.getGatewayid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayDiscoveryMessage} returns this
 */
proto.gateway.GatewayDiscoveryMessage.prototype.setGatewayid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string softwareVersion = 3;
 * @return {string}
 */
proto.gateway.GatewayDiscoveryMessage.prototype.getSoftwareversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GatewayDiscoveryMessage} returns this
 */
proto.gateway.GatewayDiscoveryMessage.prototype.setSoftwareversion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 config_id = 4;
 * @return {number}
 */
proto.gateway.GatewayDiscoveryMessage.prototype.getConfigId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayDiscoveryMessage} returns this
 */
proto.gateway.GatewayDiscoveryMessage.prototype.setConfigId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.GatewayEventMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.GatewayEventMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.GatewayEventMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewayEventMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gatewayid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    eventid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.GatewayEventMessage}
 */
proto.gateway.GatewayEventMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.GatewayEventMessage;
  return proto.gateway.GatewayEventMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.GatewayEventMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.GatewayEventMessage}
 */
proto.gateway.GatewayEventMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGatewayid(value);
      break;
    case 3:
      var value = /** @type {!proto.gateway.GatewayEventID} */ (reader.readEnum());
      msg.setEventid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.GatewayEventMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.GatewayEventMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.GatewayEventMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewayEventMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getGatewayid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getEventid();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint64 messageID = 1;
 * @return {number}
 */
proto.gateway.GatewayEventMessage.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayEventMessage} returns this
 */
proto.gateway.GatewayEventMessage.prototype.setMessageid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 gatewayID = 2;
 * @return {number}
 */
proto.gateway.GatewayEventMessage.prototype.getGatewayid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayEventMessage} returns this
 */
proto.gateway.GatewayEventMessage.prototype.setGatewayid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional GatewayEventID eventID = 3;
 * @return {!proto.gateway.GatewayEventID}
 */
proto.gateway.GatewayEventMessage.prototype.getEventid = function() {
  return /** @type {!proto.gateway.GatewayEventID} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.gateway.GatewayEventID} value
 * @return {!proto.gateway.GatewayEventMessage} returns this
 */
proto.gateway.GatewayEventMessage.prototype.setEventid = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint32 timestamp = 4;
 * @return {number}
 */
proto.gateway.GatewayEventMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayEventMessage} returns this
 */
proto.gateway.GatewayEventMessage.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string msg = 5;
 * @return {string}
 */
proto.gateway.GatewayEventMessage.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GatewayEventMessage} returns this
 */
proto.gateway.GatewayEventMessage.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.gateway.GatewayTaskMessage.oneofGroups_ = [[5,7,8]];

/**
 * @enum {number}
 */
proto.gateway.GatewayTaskMessage.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  PARAMS: 5,
  ADVERTISINGGATEWAYID: 7,
  SLEEPPARAMS: 8
};

/**
 * @return {proto.gateway.GatewayTaskMessage.PayloadCase}
 */
proto.gateway.GatewayTaskMessage.prototype.getPayloadCase = function() {
  return /** @type {proto.gateway.GatewayTaskMessage.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.gateway.GatewayTaskMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.GatewayTaskMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.GatewayTaskMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.GatewayTaskMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewayTaskMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    taskid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    delayexecution: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    executiontime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    params: (f = msg.getParams()) && proto.gateway.GatewayParams.toObject(includeInstance, f),
    advertisinggatewayid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    sleepparams: (f = msg.getSleepparams()) && proto.gateway.GatewaySleepParams.toObject(includeInstance, f),
    calibrateParams: (f = msg.getCalibrateParams()) && proto.gateway.GatewayCalibrateParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.GatewayTaskMessage}
 */
proto.gateway.GatewayTaskMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.GatewayTaskMessage;
  return proto.gateway.GatewayTaskMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.GatewayTaskMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.GatewayTaskMessage}
 */
proto.gateway.GatewayTaskMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {!proto.gateway.GatewayTaskID} */ (reader.readEnum());
      msg.setTaskid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDelayexecution(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExecutiontime(value);
      break;
    case 5:
      var value = new proto.gateway.GatewayParams;
      reader.readMessage(value,proto.gateway.GatewayParams.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAdvertisinggatewayid(value);
      break;
    case 8:
      var value = new proto.gateway.GatewaySleepParams;
      reader.readMessage(value,proto.gateway.GatewaySleepParams.deserializeBinaryFromReader);
      msg.setSleepparams(value);
      break;
    case 6:
      var value = new proto.gateway.GatewayCalibrateParams;
      reader.readMessage(value,proto.gateway.GatewayCalibrateParams.deserializeBinaryFromReader);
      msg.setCalibrateParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.GatewayTaskMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.GatewayTaskMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.GatewayTaskMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewayTaskMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTaskid();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDelayexecution();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getExecutiontime();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.gateway.GatewayParams.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getSleepparams();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.gateway.GatewaySleepParams.serializeBinaryToWriter
    );
  }
  f = message.getCalibrateParams();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.gateway.GatewayCalibrateParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 messageID = 1;
 * @return {number}
 */
proto.gateway.GatewayTaskMessage.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayTaskMessage} returns this
 */
proto.gateway.GatewayTaskMessage.prototype.setMessageid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional GatewayTaskID taskID = 2;
 * @return {!proto.gateway.GatewayTaskID}
 */
proto.gateway.GatewayTaskMessage.prototype.getTaskid = function() {
  return /** @type {!proto.gateway.GatewayTaskID} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.gateway.GatewayTaskID} value
 * @return {!proto.gateway.GatewayTaskMessage} returns this
 */
proto.gateway.GatewayTaskMessage.prototype.setTaskid = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool delayExecution = 3;
 * @return {boolean}
 */
proto.gateway.GatewayTaskMessage.prototype.getDelayexecution = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayTaskMessage} returns this
 */
proto.gateway.GatewayTaskMessage.prototype.setDelayexecution = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional uint32 executionTime = 4;
 * @return {number}
 */
proto.gateway.GatewayTaskMessage.prototype.getExecutiontime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayTaskMessage} returns this
 */
proto.gateway.GatewayTaskMessage.prototype.setExecutiontime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional GatewayParams params = 5;
 * @return {?proto.gateway.GatewayParams}
 */
proto.gateway.GatewayTaskMessage.prototype.getParams = function() {
  return /** @type{?proto.gateway.GatewayParams} */ (
    jspb.Message.getWrapperField(this, proto.gateway.GatewayParams, 5));
};


/**
 * @param {?proto.gateway.GatewayParams|undefined} value
 * @return {!proto.gateway.GatewayTaskMessage} returns this
*/
proto.gateway.GatewayTaskMessage.prototype.setParams = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.gateway.GatewayTaskMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.GatewayTaskMessage} returns this
 */
proto.gateway.GatewayTaskMessage.prototype.clearParams = function() {
  return this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.GatewayTaskMessage.prototype.hasParams = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 advertisingGatewayID = 7;
 * @return {number}
 */
proto.gateway.GatewayTaskMessage.prototype.getAdvertisinggatewayid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayTaskMessage} returns this
 */
proto.gateway.GatewayTaskMessage.prototype.setAdvertisinggatewayid = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.gateway.GatewayTaskMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gateway.GatewayTaskMessage} returns this
 */
proto.gateway.GatewayTaskMessage.prototype.clearAdvertisinggatewayid = function() {
  return jspb.Message.setOneofField(this, 7, proto.gateway.GatewayTaskMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.GatewayTaskMessage.prototype.hasAdvertisinggatewayid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional GatewaySleepParams sleepParams = 8;
 * @return {?proto.gateway.GatewaySleepParams}
 */
proto.gateway.GatewayTaskMessage.prototype.getSleepparams = function() {
  return /** @type{?proto.gateway.GatewaySleepParams} */ (
    jspb.Message.getWrapperField(this, proto.gateway.GatewaySleepParams, 8));
};


/**
 * @param {?proto.gateway.GatewaySleepParams|undefined} value
 * @return {!proto.gateway.GatewayTaskMessage} returns this
*/
proto.gateway.GatewayTaskMessage.prototype.setSleepparams = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.gateway.GatewayTaskMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.GatewayTaskMessage} returns this
 */
proto.gateway.GatewayTaskMessage.prototype.clearSleepparams = function() {
  return this.setSleepparams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.GatewayTaskMessage.prototype.hasSleepparams = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional GatewayCalibrateParams calibrate_params = 6;
 * @return {?proto.gateway.GatewayCalibrateParams}
 */
proto.gateway.GatewayTaskMessage.prototype.getCalibrateParams = function() {
  return /** @type{?proto.gateway.GatewayCalibrateParams} */ (
    jspb.Message.getWrapperField(this, proto.gateway.GatewayCalibrateParams, 6));
};


/**
 * @param {?proto.gateway.GatewayCalibrateParams|undefined} value
 * @return {!proto.gateway.GatewayTaskMessage} returns this
*/
proto.gateway.GatewayTaskMessage.prototype.setCalibrateParams = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.GatewayTaskMessage} returns this
 */
proto.gateway.GatewayTaskMessage.prototype.clearCalibrateParams = function() {
  return this.setCalibrateParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.GatewayTaskMessage.prototype.hasCalibrateParams = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.GatewaySleepParams.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.GatewaySleepParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.GatewaySleepParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewaySleepParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    durationMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blocking: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.GatewaySleepParams}
 */
proto.gateway.GatewaySleepParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.GatewaySleepParams;
  return proto.gateway.GatewaySleepParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.GatewaySleepParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.GatewaySleepParams}
 */
proto.gateway.GatewaySleepParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.gateway.GatewaySleepType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDurationMs(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlocking(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.GatewaySleepParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.GatewaySleepParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.GatewaySleepParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewaySleepParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDurationMs();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBlocking();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional GatewaySleepType type = 1;
 * @return {!proto.gateway.GatewaySleepType}
 */
proto.gateway.GatewaySleepParams.prototype.getType = function() {
  return /** @type {!proto.gateway.GatewaySleepType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.gateway.GatewaySleepType} value
 * @return {!proto.gateway.GatewaySleepParams} returns this
 */
proto.gateway.GatewaySleepParams.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 duration_ms = 2;
 * @return {number}
 */
proto.gateway.GatewaySleepParams.prototype.getDurationMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewaySleepParams} returns this
 */
proto.gateway.GatewaySleepParams.prototype.setDurationMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool blocking = 3;
 * @return {boolean}
 */
proto.gateway.GatewaySleepParams.prototype.getBlocking = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewaySleepParams} returns this
 */
proto.gateway.GatewaySleepParams.prototype.setBlocking = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gateway.GatewayCalibrateParams.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.GatewayCalibrateParams.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.GatewayCalibrateParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.GatewayCalibrateParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewayCalibrateParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    numOfPhases: jspb.Message.getFieldWithDefault(msg, 1, 0),
    phaseDurationMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    advScanVector: jspb.Message.getFieldWithDefault(msg, 3, 0),
    zoneGatewayIdsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.GatewayCalibrateParams}
 */
proto.gateway.GatewayCalibrateParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.GatewayCalibrateParams;
  return proto.gateway.GatewayCalibrateParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.GatewayCalibrateParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.GatewayCalibrateParams}
 */
proto.gateway.GatewayCalibrateParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumOfPhases(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPhaseDurationMs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAdvScanVector(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setZoneGatewayIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.GatewayCalibrateParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.GatewayCalibrateParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.GatewayCalibrateParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewayCalibrateParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumOfPhases();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPhaseDurationMs();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAdvScanVector();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getZoneGatewayIdsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      4,
      f
    );
  }
};


/**
 * optional uint32 num_of_phases = 1;
 * @return {number}
 */
proto.gateway.GatewayCalibrateParams.prototype.getNumOfPhases = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayCalibrateParams} returns this
 */
proto.gateway.GatewayCalibrateParams.prototype.setNumOfPhases = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 phase_duration_ms = 2;
 * @return {number}
 */
proto.gateway.GatewayCalibrateParams.prototype.getPhaseDurationMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayCalibrateParams} returns this
 */
proto.gateway.GatewayCalibrateParams.prototype.setPhaseDurationMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 adv_scan_vector = 3;
 * @return {number}
 */
proto.gateway.GatewayCalibrateParams.prototype.getAdvScanVector = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayCalibrateParams} returns this
 */
proto.gateway.GatewayCalibrateParams.prototype.setAdvScanVector = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated uint64 zone_gateway_ids = 4;
 * @return {!Array<number>}
 */
proto.gateway.GatewayCalibrateParams.prototype.getZoneGatewayIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.gateway.GatewayCalibrateParams} returns this
 */
proto.gateway.GatewayCalibrateParams.prototype.setZoneGatewayIdsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.gateway.GatewayCalibrateParams} returns this
 */
proto.gateway.GatewayCalibrateParams.prototype.addZoneGatewayIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.GatewayCalibrateParams} returns this
 */
proto.gateway.GatewayCalibrateParams.prototype.clearZoneGatewayIdsList = function() {
  return this.setZoneGatewayIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.GatewayTaskResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.GatewayTaskResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.GatewayTaskResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewayTaskResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gatewayid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    responsecode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.GatewayTaskResponseMessage}
 */
proto.gateway.GatewayTaskResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.GatewayTaskResponseMessage;
  return proto.gateway.GatewayTaskResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.GatewayTaskResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.GatewayTaskResponseMessage}
 */
proto.gateway.GatewayTaskResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGatewayid(value);
      break;
    case 3:
      var value = /** @type {!proto.gateway.GatewayResponseCode} */ (reader.readEnum());
      msg.setResponsecode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.GatewayTaskResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.GatewayTaskResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.GatewayTaskResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewayTaskResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getGatewayid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getResponsecode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint64 messageID = 1;
 * @return {number}
 */
proto.gateway.GatewayTaskResponseMessage.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayTaskResponseMessage} returns this
 */
proto.gateway.GatewayTaskResponseMessage.prototype.setMessageid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 gatewayID = 2;
 * @return {number}
 */
proto.gateway.GatewayTaskResponseMessage.prototype.getGatewayid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayTaskResponseMessage} returns this
 */
proto.gateway.GatewayTaskResponseMessage.prototype.setGatewayid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional GatewayResponseCode responseCode = 3;
 * @return {!proto.gateway.GatewayResponseCode}
 */
proto.gateway.GatewayTaskResponseMessage.prototype.getResponsecode = function() {
  return /** @type {!proto.gateway.GatewayResponseCode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.gateway.GatewayResponseCode} value
 * @return {!proto.gateway.GatewayTaskResponseMessage} returns this
 */
proto.gateway.GatewayTaskResponseMessage.prototype.setResponsecode = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string msg = 4;
 * @return {string}
 */
proto.gateway.GatewayTaskResponseMessage.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GatewayTaskResponseMessage} returns this
 */
proto.gateway.GatewayTaskResponseMessage.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.GatewayParams.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.GatewayParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.GatewayParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewayParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    configId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    persistReboot: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    bleEnable: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    bleFastUnsyncedScanDuration: jspb.Message.getFieldWithDefault(msg, 4, 0),
    bleScanDuration: jspb.Message.getFieldWithDefault(msg, 58, 0),
    bleScanInterval: jspb.Message.getFieldWithDefault(msg, 5, 0),
    bleScanWindow: jspb.Message.getFieldWithDefault(msg, 6, 0),
    bleMaxDevices: jspb.Message.getFieldWithDefault(msg, 7, 0),
    bleCalibAdvDuration: jspb.Message.getFieldWithDefault(msg, 8, 0),
    bleCalibScanDuration: jspb.Message.getFieldWithDefault(msg, 9, 0),
    wifiEnable: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    wifiSsid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    wifiPassword: jspb.Message.getFieldWithDefault(msg, 12, ""),
    wifiMaxRetry: jspb.Message.getFieldWithDefault(msg, 13, 0),
    mqttEnable: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    mqttUri: jspb.Message.getFieldWithDefault(msg, 15, ""),
    mqttPort: jspb.Message.getFieldWithDefault(msg, 16, 0),
    mqttUsername: jspb.Message.getFieldWithDefault(msg, 17, ""),
    mqttPassword: jspb.Message.getFieldWithDefault(msg, 18, ""),
    mqttRequestTopic: jspb.Message.getFieldWithDefault(msg, 19, ""),
    mqttDiscoveryTopic: jspb.Message.getFieldWithDefault(msg, 20, ""),
    mqttResponseTopic: jspb.Message.getFieldWithDefault(msg, 21, ""),
    mqttStatusTopic: jspb.Message.getFieldWithDefault(msg, 22, ""),
    mqttCalibrationTopic: jspb.Message.getFieldWithDefault(msg, 23, ""),
    mqttPingTopic: jspb.Message.getFieldWithDefault(msg, 24, ""),
    sntpEnable: jspb.Message.getBooleanFieldWithDefault(msg, 25, false),
    sntpServerName: jspb.Message.getFieldWithDefault(msg, 26, ""),
    schedulerQueueSize: jspb.Message.getFieldWithDefault(msg, 27, 0),
    schedulerStartLoopOnBoot: jspb.Message.getBooleanFieldWithDefault(msg, 28, false),
    schedulerRespondToRequests: jspb.Message.getBooleanFieldWithDefault(msg, 29, false),
    schedulerStartMainLoopWithoutBackend: jspb.Message.getBooleanFieldWithDefault(msg, 30, false),
    mainLoopQueueSize: jspb.Message.getFieldWithDefault(msg, 31, 0),
    mainLoopReportStatus: jspb.Message.getBooleanFieldWithDefault(msg, 32, false),
    mainLoopDtStart: jspb.Message.getFieldWithDefault(msg, 33, 0),
    mainLoopDtPub: jspb.Message.getFieldWithDefault(msg, 34, 0),
    mainLoopDtEnd: jspb.Message.getFieldWithDefault(msg, 35, 0),
    mainLoopLog: jspb.Message.getBooleanFieldWithDefault(msg, 36, false),
    faultHandlerRestartOnFatal: jspb.Message.getBooleanFieldWithDefault(msg, 37, false),
    faultHandlerBlobSize: jspb.Message.getFieldWithDefault(msg, 38, 0),
    faultHandlerTimeoutMin: jspb.Message.getFieldWithDefault(msg, 39, 0),
    faultHandlerMaxFaults: jspb.Message.getFieldWithDefault(msg, 40, 0),
    faultHandlerRestartOnTimeout: jspb.Message.getBooleanFieldWithDefault(msg, 41, false),
    statusHandlerRaiseFaultOnWaitTimeout: jspb.Message.getBooleanFieldWithDefault(msg, 42, false),
    logLevel: jspb.Message.getFieldWithDefault(msg, 43, 0),
    otaServerUrl: jspb.Message.getFieldWithDefault(msg, 44, ""),
    calibEnable: jspb.Message.getBooleanFieldWithDefault(msg, 45, false),
    linkHandlerPingTimeoutMin: jspb.Message.getFieldWithDefault(msg, 46, 0),
    linkHandlerRestartOnTimeout: jspb.Message.getBooleanFieldWithDefault(msg, 47, false),
    mqttAckRespond: jspb.Message.getBooleanFieldWithDefault(msg, 48, false),
    mqttEventTopic: jspb.Message.getFieldWithDefault(msg, 49, ""),
    faultHandlerPublishEvents: jspb.Message.getBooleanFieldWithDefault(msg, 50, false),
    udpLoggerEnable: jspb.Message.getBooleanFieldWithDefault(msg, 51, false),
    udpLoggerUrl: jspb.Message.getFieldWithDefault(msg, 52, ""),
    udpLoggerPort: jspb.Message.getFieldWithDefault(msg, 53, 0),
    otaEnableRollback: jspb.Message.getBooleanFieldWithDefault(msg, 54, false),
    otaUpdateTimeoutMin: jspb.Message.getFieldWithDefault(msg, 55, 0),
    eventHandlerLevel: jspb.Message.getFieldWithDefault(msg, 56, 0),
    syncHandlerPublishEvents: jspb.Message.getBooleanFieldWithDefault(msg, 57, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.GatewayParams}
 */
proto.gateway.GatewayParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.GatewayParams;
  return proto.gateway.GatewayParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.GatewayParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.GatewayParams}
 */
proto.gateway.GatewayParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConfigId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPersistReboot(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBleEnable(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBleFastUnsyncedScanDuration(value);
      break;
    case 58:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBleScanDuration(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBleScanInterval(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBleScanWindow(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBleMaxDevices(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBleCalibAdvDuration(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBleCalibScanDuration(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWifiEnable(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setWifiSsid(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setWifiPassword(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWifiMaxRetry(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMqttEnable(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttUri(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMqttPort(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttUsername(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttPassword(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttRequestTopic(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttDiscoveryTopic(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttResponseTopic(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttStatusTopic(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttCalibrationTopic(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttPingTopic(value);
      break;
    case 25:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSntpEnable(value);
      break;
    case 26:
      var value = /** @type {string} */ (reader.readString());
      msg.setSntpServerName(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSchedulerQueueSize(value);
      break;
    case 28:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSchedulerStartLoopOnBoot(value);
      break;
    case 29:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSchedulerRespondToRequests(value);
      break;
    case 30:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSchedulerStartMainLoopWithoutBackend(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMainLoopQueueSize(value);
      break;
    case 32:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMainLoopReportStatus(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMainLoopDtStart(value);
      break;
    case 34:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMainLoopDtPub(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMainLoopDtEnd(value);
      break;
    case 36:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMainLoopLog(value);
      break;
    case 37:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFaultHandlerRestartOnFatal(value);
      break;
    case 38:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFaultHandlerBlobSize(value);
      break;
    case 39:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFaultHandlerTimeoutMin(value);
      break;
    case 40:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFaultHandlerMaxFaults(value);
      break;
    case 41:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFaultHandlerRestartOnTimeout(value);
      break;
    case 42:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatusHandlerRaiseFaultOnWaitTimeout(value);
      break;
    case 43:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLogLevel(value);
      break;
    case 44:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtaServerUrl(value);
      break;
    case 45:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCalibEnable(value);
      break;
    case 46:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLinkHandlerPingTimeoutMin(value);
      break;
    case 47:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLinkHandlerRestartOnTimeout(value);
      break;
    case 48:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMqttAckRespond(value);
      break;
    case 49:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttEventTopic(value);
      break;
    case 50:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFaultHandlerPublishEvents(value);
      break;
    case 51:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUdpLoggerEnable(value);
      break;
    case 52:
      var value = /** @type {string} */ (reader.readString());
      msg.setUdpLoggerUrl(value);
      break;
    case 53:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUdpLoggerPort(value);
      break;
    case 54:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOtaEnableRollback(value);
      break;
    case 55:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOtaUpdateTimeoutMin(value);
      break;
    case 56:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEventHandlerLevel(value);
      break;
    case 57:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSyncHandlerPublishEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.GatewayParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.GatewayParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.GatewayParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewayParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPersistReboot();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getBleEnable();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getBleFastUnsyncedScanDuration();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getBleScanDuration();
  if (f !== 0) {
    writer.writeUint32(
      58,
      f
    );
  }
  f = message.getBleScanInterval();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getBleScanWindow();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getBleMaxDevices();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getBleCalibAdvDuration();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getBleCalibScanDuration();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getWifiEnable();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getWifiSsid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getWifiPassword();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getWifiMaxRetry();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getMqttEnable();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getMqttUri();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getMqttPort();
  if (f !== 0) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = message.getMqttUsername();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getMqttPassword();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getMqttRequestTopic();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getMqttDiscoveryTopic();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getMqttResponseTopic();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getMqttStatusTopic();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getMqttCalibrationTopic();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getMqttPingTopic();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
  f = message.getSntpEnable();
  if (f) {
    writer.writeBool(
      25,
      f
    );
  }
  f = message.getSntpServerName();
  if (f.length > 0) {
    writer.writeString(
      26,
      f
    );
  }
  f = message.getSchedulerQueueSize();
  if (f !== 0) {
    writer.writeUint32(
      27,
      f
    );
  }
  f = message.getSchedulerStartLoopOnBoot();
  if (f) {
    writer.writeBool(
      28,
      f
    );
  }
  f = message.getSchedulerRespondToRequests();
  if (f) {
    writer.writeBool(
      29,
      f
    );
  }
  f = message.getSchedulerStartMainLoopWithoutBackend();
  if (f) {
    writer.writeBool(
      30,
      f
    );
  }
  f = message.getMainLoopQueueSize();
  if (f !== 0) {
    writer.writeUint32(
      31,
      f
    );
  }
  f = message.getMainLoopReportStatus();
  if (f) {
    writer.writeBool(
      32,
      f
    );
  }
  f = message.getMainLoopDtStart();
  if (f !== 0) {
    writer.writeUint32(
      33,
      f
    );
  }
  f = message.getMainLoopDtPub();
  if (f !== 0) {
    writer.writeUint32(
      34,
      f
    );
  }
  f = message.getMainLoopDtEnd();
  if (f !== 0) {
    writer.writeUint32(
      35,
      f
    );
  }
  f = message.getMainLoopLog();
  if (f) {
    writer.writeBool(
      36,
      f
    );
  }
  f = message.getFaultHandlerRestartOnFatal();
  if (f) {
    writer.writeBool(
      37,
      f
    );
  }
  f = message.getFaultHandlerBlobSize();
  if (f !== 0) {
    writer.writeUint32(
      38,
      f
    );
  }
  f = message.getFaultHandlerTimeoutMin();
  if (f !== 0) {
    writer.writeUint32(
      39,
      f
    );
  }
  f = message.getFaultHandlerMaxFaults();
  if (f !== 0) {
    writer.writeUint32(
      40,
      f
    );
  }
  f = message.getFaultHandlerRestartOnTimeout();
  if (f) {
    writer.writeBool(
      41,
      f
    );
  }
  f = message.getStatusHandlerRaiseFaultOnWaitTimeout();
  if (f) {
    writer.writeBool(
      42,
      f
    );
  }
  f = message.getLogLevel();
  if (f !== 0) {
    writer.writeUint32(
      43,
      f
    );
  }
  f = message.getOtaServerUrl();
  if (f.length > 0) {
    writer.writeString(
      44,
      f
    );
  }
  f = message.getCalibEnable();
  if (f) {
    writer.writeBool(
      45,
      f
    );
  }
  f = message.getLinkHandlerPingTimeoutMin();
  if (f !== 0) {
    writer.writeUint32(
      46,
      f
    );
  }
  f = message.getLinkHandlerRestartOnTimeout();
  if (f) {
    writer.writeBool(
      47,
      f
    );
  }
  f = message.getMqttAckRespond();
  if (f) {
    writer.writeBool(
      48,
      f
    );
  }
  f = message.getMqttEventTopic();
  if (f.length > 0) {
    writer.writeString(
      49,
      f
    );
  }
  f = message.getFaultHandlerPublishEvents();
  if (f) {
    writer.writeBool(
      50,
      f
    );
  }
  f = message.getUdpLoggerEnable();
  if (f) {
    writer.writeBool(
      51,
      f
    );
  }
  f = message.getUdpLoggerUrl();
  if (f.length > 0) {
    writer.writeString(
      52,
      f
    );
  }
  f = message.getUdpLoggerPort();
  if (f !== 0) {
    writer.writeUint32(
      53,
      f
    );
  }
  f = message.getOtaEnableRollback();
  if (f) {
    writer.writeBool(
      54,
      f
    );
  }
  f = message.getOtaUpdateTimeoutMin();
  if (f !== 0) {
    writer.writeUint32(
      55,
      f
    );
  }
  f = message.getEventHandlerLevel();
  if (f !== 0) {
    writer.writeUint32(
      56,
      f
    );
  }
  f = message.getSyncHandlerPublishEvents();
  if (f) {
    writer.writeBool(
      57,
      f
    );
  }
};


/**
 * optional uint32 config_id = 1;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getConfigId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setConfigId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool persist_reboot = 2;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getPersistReboot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setPersistReboot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool ble_enable = 3;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getBleEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setBleEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional uint32 ble_fast_unsynced_scan_duration = 4;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getBleFastUnsyncedScanDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setBleFastUnsyncedScanDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 ble_scan_duration = 58;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getBleScanDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 58, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setBleScanDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 58, value);
};


/**
 * optional uint32 ble_scan_interval = 5;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getBleScanInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setBleScanInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 ble_scan_window = 6;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getBleScanWindow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setBleScanWindow = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 ble_max_devices = 7;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getBleMaxDevices = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setBleMaxDevices = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 ble_calib_adv_duration = 8;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getBleCalibAdvDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setBleCalibAdvDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 ble_calib_scan_duration = 9;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getBleCalibScanDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setBleCalibScanDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bool wifi_enable = 10;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getWifiEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setWifiEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional string wifi_ssid = 11;
 * @return {string}
 */
proto.gateway.GatewayParams.prototype.getWifiSsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setWifiSsid = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string wifi_password = 12;
 * @return {string}
 */
proto.gateway.GatewayParams.prototype.getWifiPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setWifiPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional uint32 wifi_max_retry = 13;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getWifiMaxRetry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setWifiMaxRetry = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional bool mqtt_enable = 14;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getMqttEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMqttEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional string mqtt_uri = 15;
 * @return {string}
 */
proto.gateway.GatewayParams.prototype.getMqttUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMqttUri = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional uint32 mqtt_port = 16;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getMqttPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMqttPort = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional string mqtt_username = 17;
 * @return {string}
 */
proto.gateway.GatewayParams.prototype.getMqttUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMqttUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string mqtt_password = 18;
 * @return {string}
 */
proto.gateway.GatewayParams.prototype.getMqttPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMqttPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string mqtt_request_topic = 19;
 * @return {string}
 */
proto.gateway.GatewayParams.prototype.getMqttRequestTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMqttRequestTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string mqtt_discovery_topic = 20;
 * @return {string}
 */
proto.gateway.GatewayParams.prototype.getMqttDiscoveryTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMqttDiscoveryTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string mqtt_response_topic = 21;
 * @return {string}
 */
proto.gateway.GatewayParams.prototype.getMqttResponseTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMqttResponseTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string mqtt_status_topic = 22;
 * @return {string}
 */
proto.gateway.GatewayParams.prototype.getMqttStatusTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMqttStatusTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional string mqtt_calibration_topic = 23;
 * @return {string}
 */
proto.gateway.GatewayParams.prototype.getMqttCalibrationTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMqttCalibrationTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional string mqtt_ping_topic = 24;
 * @return {string}
 */
proto.gateway.GatewayParams.prototype.getMqttPingTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMqttPingTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 24, value);
};


/**
 * optional bool sntp_enable = 25;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getSntpEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 25, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setSntpEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 25, value);
};


/**
 * optional string sntp_server_name = 26;
 * @return {string}
 */
proto.gateway.GatewayParams.prototype.getSntpServerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setSntpServerName = function(value) {
  return jspb.Message.setProto3StringField(this, 26, value);
};


/**
 * optional uint32 scheduler_queue_size = 27;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getSchedulerQueueSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setSchedulerQueueSize = function(value) {
  return jspb.Message.setProto3IntField(this, 27, value);
};


/**
 * optional bool scheduler_start_loop_on_boot = 28;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getSchedulerStartLoopOnBoot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 28, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setSchedulerStartLoopOnBoot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 28, value);
};


/**
 * optional bool scheduler_respond_to_requests = 29;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getSchedulerRespondToRequests = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 29, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setSchedulerRespondToRequests = function(value) {
  return jspb.Message.setProto3BooleanField(this, 29, value);
};


/**
 * optional bool scheduler_start_main_loop_without_backend = 30;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getSchedulerStartMainLoopWithoutBackend = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 30, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setSchedulerStartMainLoopWithoutBackend = function(value) {
  return jspb.Message.setProto3BooleanField(this, 30, value);
};


/**
 * optional uint32 main_loop_queue_size = 31;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getMainLoopQueueSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMainLoopQueueSize = function(value) {
  return jspb.Message.setProto3IntField(this, 31, value);
};


/**
 * optional bool main_loop_report_status = 32;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getMainLoopReportStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 32, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMainLoopReportStatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 32, value);
};


/**
 * optional uint32 main_loop_dT_start = 33;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getMainLoopDtStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 33, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMainLoopDtStart = function(value) {
  return jspb.Message.setProto3IntField(this, 33, value);
};


/**
 * optional uint32 main_loop_dT_pub = 34;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getMainLoopDtPub = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 34, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMainLoopDtPub = function(value) {
  return jspb.Message.setProto3IntField(this, 34, value);
};


/**
 * optional uint32 main_loop_dT_end = 35;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getMainLoopDtEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 35, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMainLoopDtEnd = function(value) {
  return jspb.Message.setProto3IntField(this, 35, value);
};


/**
 * optional bool main_loop_log = 36;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getMainLoopLog = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 36, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMainLoopLog = function(value) {
  return jspb.Message.setProto3BooleanField(this, 36, value);
};


/**
 * optional bool fault_handler_restart_on_fatal = 37;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getFaultHandlerRestartOnFatal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 37, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setFaultHandlerRestartOnFatal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 37, value);
};


/**
 * optional uint32 fault_handler_blob_size = 38;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getFaultHandlerBlobSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 38, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setFaultHandlerBlobSize = function(value) {
  return jspb.Message.setProto3IntField(this, 38, value);
};


/**
 * optional uint32 fault_handler_timeout_min = 39;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getFaultHandlerTimeoutMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 39, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setFaultHandlerTimeoutMin = function(value) {
  return jspb.Message.setProto3IntField(this, 39, value);
};


/**
 * optional uint32 fault_handler_max_faults = 40;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getFaultHandlerMaxFaults = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 40, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setFaultHandlerMaxFaults = function(value) {
  return jspb.Message.setProto3IntField(this, 40, value);
};


/**
 * optional bool fault_handler_restart_on_timeout = 41;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getFaultHandlerRestartOnTimeout = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 41, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setFaultHandlerRestartOnTimeout = function(value) {
  return jspb.Message.setProto3BooleanField(this, 41, value);
};


/**
 * optional bool status_handler_raise_fault_on_wait_timeout = 42;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getStatusHandlerRaiseFaultOnWaitTimeout = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 42, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setStatusHandlerRaiseFaultOnWaitTimeout = function(value) {
  return jspb.Message.setProto3BooleanField(this, 42, value);
};


/**
 * optional uint32 log_level = 43;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getLogLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 43, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setLogLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 43, value);
};


/**
 * optional string ota_server_url = 44;
 * @return {string}
 */
proto.gateway.GatewayParams.prototype.getOtaServerUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 44, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setOtaServerUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 44, value);
};


/**
 * optional bool calib_enable = 45;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getCalibEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 45, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setCalibEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 45, value);
};


/**
 * optional uint32 link_handler_ping_timeout_min = 46;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getLinkHandlerPingTimeoutMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 46, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setLinkHandlerPingTimeoutMin = function(value) {
  return jspb.Message.setProto3IntField(this, 46, value);
};


/**
 * optional bool link_handler_restart_on_timeout = 47;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getLinkHandlerRestartOnTimeout = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 47, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setLinkHandlerRestartOnTimeout = function(value) {
  return jspb.Message.setProto3BooleanField(this, 47, value);
};


/**
 * optional bool mqtt_ack_respond = 48;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getMqttAckRespond = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 48, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMqttAckRespond = function(value) {
  return jspb.Message.setProto3BooleanField(this, 48, value);
};


/**
 * optional string mqtt_event_topic = 49;
 * @return {string}
 */
proto.gateway.GatewayParams.prototype.getMqttEventTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 49, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setMqttEventTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 49, value);
};


/**
 * optional bool fault_handler_publish_events = 50;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getFaultHandlerPublishEvents = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 50, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setFaultHandlerPublishEvents = function(value) {
  return jspb.Message.setProto3BooleanField(this, 50, value);
};


/**
 * optional bool udp_logger_enable = 51;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getUdpLoggerEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 51, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setUdpLoggerEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 51, value);
};


/**
 * optional string udp_logger_url = 52;
 * @return {string}
 */
proto.gateway.GatewayParams.prototype.getUdpLoggerUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 52, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setUdpLoggerUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 52, value);
};


/**
 * optional uint32 udp_logger_port = 53;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getUdpLoggerPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 53, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setUdpLoggerPort = function(value) {
  return jspb.Message.setProto3IntField(this, 53, value);
};


/**
 * optional bool ota_enable_rollback = 54;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getOtaEnableRollback = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 54, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setOtaEnableRollback = function(value) {
  return jspb.Message.setProto3BooleanField(this, 54, value);
};


/**
 * optional uint32 ota_update_timeout_min = 55;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getOtaUpdateTimeoutMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 55, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setOtaUpdateTimeoutMin = function(value) {
  return jspb.Message.setProto3IntField(this, 55, value);
};


/**
 * optional uint32 event_handler_level = 56;
 * @return {number}
 */
proto.gateway.GatewayParams.prototype.getEventHandlerLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 56, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setEventHandlerLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 56, value);
};


/**
 * optional bool sync_handler_publish_events = 57;
 * @return {boolean}
 */
proto.gateway.GatewayParams.prototype.getSyncHandlerPublishEvents = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 57, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gateway.GatewayParams} returns this
 */
proto.gateway.GatewayParams.prototype.setSyncHandlerPublishEvents = function(value) {
  return jspb.Message.setProto3BooleanField(this, 57, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.GatewayStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.GatewayStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.GatewayStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewayStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gatewayid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    wifiUp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    bleUp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    mqttUp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    sntpUp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    freeHeap: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.GatewayStatus}
 */
proto.gateway.GatewayStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.GatewayStatus;
  return proto.gateway.GatewayStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.GatewayStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.GatewayStatus}
 */
proto.gateway.GatewayStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGatewayid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWifiUp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBleUp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMqttUp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSntpUp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFreeHeap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.GatewayStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.GatewayStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.GatewayStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GatewayStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getGatewayid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getWifiUp();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getBleUp();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMqttUp();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getSntpUp();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getFreeHeap();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional uint64 messageID = 1;
 * @return {number}
 */
proto.gateway.GatewayStatus.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayStatus} returns this
 */
proto.gateway.GatewayStatus.prototype.setMessageid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 gatewayID = 2;
 * @return {number}
 */
proto.gateway.GatewayStatus.prototype.getGatewayid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayStatus} returns this
 */
proto.gateway.GatewayStatus.prototype.setGatewayid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 wifi_up = 3;
 * @return {number}
 */
proto.gateway.GatewayStatus.prototype.getWifiUp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayStatus} returns this
 */
proto.gateway.GatewayStatus.prototype.setWifiUp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 ble_up = 4;
 * @return {number}
 */
proto.gateway.GatewayStatus.prototype.getBleUp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayStatus} returns this
 */
proto.gateway.GatewayStatus.prototype.setBleUp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 mqtt_up = 5;
 * @return {number}
 */
proto.gateway.GatewayStatus.prototype.getMqttUp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayStatus} returns this
 */
proto.gateway.GatewayStatus.prototype.setMqttUp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 sntp_up = 6;
 * @return {number}
 */
proto.gateway.GatewayStatus.prototype.getSntpUp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayStatus} returns this
 */
proto.gateway.GatewayStatus.prototype.setSntpUp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 free_heap = 7;
 * @return {number}
 */
proto.gateway.GatewayStatus.prototype.getFreeHeap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GatewayStatus} returns this
 */
proto.gateway.GatewayStatus.prototype.setFreeHeap = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.gateway.GatewayScanType = {
  NONESCAN: 0,
  SYNCED: 1,
  UNSYNCED: 2
};

/**
 * @enum {number}
 */
proto.gateway.GatewayEventID = {
  NONE: 0,
  FAULT: 1,
  SYSTEM_UP: 2,
  MAIN_LOOP_STARTED: 3,
  MAIN_LOOP_STOPED: 4,
  RESTART: 5,
  CONFIGURE: 6,
  OTA_START: 7,
  OTA_SUCCESS: 8,
  OTA_FAIL: 9,
  BROWNOUT: 10,
  MASTER_TICK: 11,
  SLEEP_ENTER: 12,
  SLEEP_WAKEUP: 13
};

/**
 * @enum {number}
 */
proto.gateway.GatewayTaskID = {
  SCHEDULER_TASK_ID_NONE: 0,
  SCHEDULER_TASK_ID_RESTART_GW: 1,
  SCHEDULER_TASK_ID_START: 2,
  SCHEDULER_TASK_ID_STOP: 3,
  SCHEDULER_TASK_ID_HANDSHAKE: 4,
  SCHEDULER_TASK_ID_CONFIGURE: 5,
  SCHEDULER_TASK_ID_PRINT_FAULTS: 6,
  SCHEDULER_TASK_ID_START_ADV: 7,
  SCHEDULER_TASK_ID_READ_RSSI: 8,
  SCHEDULER_TASK_ID_CALIBRATE: 9,
  SCHEDULER_TASK_ID_OTA_UPDATE: 10,
  SCHEDULER_TASK_ID_PING: 11,
  SCHEDULER_TASK_ID_RESET_SYNC_HANDLER: 12,
  SCHEDULER_TASK_ID_SLEEP: 13
};

/**
 * @enum {number}
 */
proto.gateway.GatewayResponseCode = {
  RESPONSE_CODE_NONE: 0,
  RESPONSE_CODE_OK: 1,
  RESPONSE_CODE_ERROR: 2,
  RESPONSE_CODE_ERROR_UNKOWN_TASK: 3,
  RESPONSE_CODE_PING_PONG: 4,
  RESPONSE_CODE_OTA_UPDATE_COMPLETE: 5,
  RESPONSE_CODE_OTA_UPDATE_FAILED: 6,
  RESPONSE_CODE_ACK: 7
};

/**
 * @enum {number}
 */
proto.gateway.GatewaySleepType = {
  NO_SLEEP: 0,
  LIGHT_SLEEP: 1
};

goog.object.extend(exports, proto.gateway);
