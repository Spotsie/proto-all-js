// source: domain/domain.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.domain.Beacon', null, global);
goog.exportSymbol('proto.domain.BeaconDto', null, global);
goog.exportSymbol('proto.domain.BeaconEvent', null, global);
goog.exportSymbol('proto.domain.BeaconEvent.EventCase', null, global);
goog.exportSymbol('proto.domain.BeaconEvent.GatePassError', null, global);
goog.exportSymbol('proto.domain.BeaconEvent.InvalidLocationChange', null, global);
goog.exportSymbol('proto.domain.BeaconEvent.LocationChange', null, global);
goog.exportSymbol('proto.domain.BeaconEvent.SpeedError', null, global);
goog.exportSymbol('proto.domain.BeaconPosition', null, global);
goog.exportSymbol('proto.domain.BeaconTimeline', null, global);
goog.exportSymbol('proto.domain.BeaconTimeline.Record', null, global);
goog.exportSymbol('proto.domain.BeaconTimelineRecord', null, global);
goog.exportSymbol('proto.domain.DeploymentDto', null, global);
goog.exportSymbol('proto.domain.DeploymentDto.ApiKey', null, global);
goog.exportSymbol('proto.domain.DeploymentDto.Config', null, global);
goog.exportSymbol('proto.domain.DeploymentDto.Map', null, global);
goog.exportSymbol('proto.domain.DeploymentDto.Map.Zone', null, global);
goog.exportSymbol('proto.domain.Feature', null, global);
goog.exportSymbol('proto.domain.FeatureCollection', null, global);
goog.exportSymbol('proto.domain.GatewayObservationDto', null, global);
goog.exportSymbol('proto.domain.Geometry', null, global);
goog.exportSymbol('proto.domain.KalmanPosition', null, global);
goog.exportSymbol('proto.domain.MeasurementDto', null, global);
goog.exportSymbol('proto.domain.MultilaterationPosition', null, global);
goog.exportSymbol('proto.domain.ObservationDto', null, global);
goog.exportSymbol('proto.domain.Point', null, global);
goog.exportSymbol('proto.domain.Polygon', null, global);
goog.exportSymbol('proto.domain.SystemEvent', null, global);
goog.exportSymbol('proto.domain.SystemEvent.BeaconTimelineUpdateEvent', null, global);
goog.exportSymbol('proto.domain.SystemEvent.EventCase', null, global);
goog.exportSymbol('proto.domain.SystemEvent.PipelineEvent', null, global);
goog.exportSymbol('proto.domain.SystemEvent.PipelineEvent.State', null, global);
goog.exportSymbol('proto.domain.Test', null, global);
goog.exportSymbol('proto.domain.Tick', null, global);
goog.exportSymbol('proto.domain.User', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.Test = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.Test, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.Test.displayName = 'proto.domain.Test';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.Beacon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.Beacon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.Beacon.displayName = 'proto.domain.Beacon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.BeaconDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.BeaconDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.BeaconDto.displayName = 'proto.domain.BeaconDto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.BeaconPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.BeaconPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.BeaconPosition.displayName = 'proto.domain.BeaconPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.MultilaterationPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.MultilaterationPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.MultilaterationPosition.displayName = 'proto.domain.MultilaterationPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.KalmanPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.KalmanPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.KalmanPosition.displayName = 'proto.domain.KalmanPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.MeasurementDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.MeasurementDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.MeasurementDto.displayName = 'proto.domain.MeasurementDto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.ObservationDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.ObservationDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.ObservationDto.displayName = 'proto.domain.ObservationDto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.GatewayObservationDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.domain.GatewayObservationDto.repeatedFields_, null);
};
goog.inherits(proto.domain.GatewayObservationDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.GatewayObservationDto.displayName = 'proto.domain.GatewayObservationDto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.Point.displayName = 'proto.domain.Point';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.Polygon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.domain.Polygon.repeatedFields_, null);
};
goog.inherits(proto.domain.Polygon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.Polygon.displayName = 'proto.domain.Polygon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.DeploymentDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.domain.DeploymentDto.repeatedFields_, null);
};
goog.inherits(proto.domain.DeploymentDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.DeploymentDto.displayName = 'proto.domain.DeploymentDto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.DeploymentDto.ApiKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.DeploymentDto.ApiKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.DeploymentDto.ApiKey.displayName = 'proto.domain.DeploymentDto.ApiKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.DeploymentDto.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.DeploymentDto.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.DeploymentDto.Config.displayName = 'proto.domain.DeploymentDto.Config';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.DeploymentDto.Map = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.domain.DeploymentDto.Map.repeatedFields_, null);
};
goog.inherits(proto.domain.DeploymentDto.Map, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.DeploymentDto.Map.displayName = 'proto.domain.DeploymentDto.Map';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.DeploymentDto.Map.Zone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.DeploymentDto.Map.Zone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.DeploymentDto.Map.Zone.displayName = 'proto.domain.DeploymentDto.Map.Zone';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.Tick = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.Tick, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.Tick.displayName = 'proto.domain.Tick';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.BeaconTimelineRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.BeaconTimelineRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.BeaconTimelineRecord.displayName = 'proto.domain.BeaconTimelineRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.BeaconTimeline = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.domain.BeaconTimeline.repeatedFields_, null);
};
goog.inherits(proto.domain.BeaconTimeline, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.BeaconTimeline.displayName = 'proto.domain.BeaconTimeline';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.BeaconTimeline.Record = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.BeaconTimeline.Record, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.BeaconTimeline.Record.displayName = 'proto.domain.BeaconTimeline.Record';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.SystemEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.domain.SystemEvent.oneofGroups_);
};
goog.inherits(proto.domain.SystemEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.SystemEvent.displayName = 'proto.domain.SystemEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.SystemEvent.PipelineEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.SystemEvent.PipelineEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.SystemEvent.PipelineEvent.displayName = 'proto.domain.SystemEvent.PipelineEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.SystemEvent.BeaconTimelineUpdateEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.SystemEvent.BeaconTimelineUpdateEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.SystemEvent.BeaconTimelineUpdateEvent.displayName = 'proto.domain.SystemEvent.BeaconTimelineUpdateEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.FeatureCollection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.domain.FeatureCollection.repeatedFields_, null);
};
goog.inherits(proto.domain.FeatureCollection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.FeatureCollection.displayName = 'proto.domain.FeatureCollection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.Feature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.Feature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.Feature.displayName = 'proto.domain.Feature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.Geometry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.domain.Geometry.repeatedFields_, null);
};
goog.inherits(proto.domain.Geometry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.Geometry.displayName = 'proto.domain.Geometry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.BeaconEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.domain.BeaconEvent.oneofGroups_);
};
goog.inherits(proto.domain.BeaconEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.BeaconEvent.displayName = 'proto.domain.BeaconEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.BeaconEvent.LocationChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.BeaconEvent.LocationChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.BeaconEvent.LocationChange.displayName = 'proto.domain.BeaconEvent.LocationChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.BeaconEvent.SpeedError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.BeaconEvent.SpeedError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.BeaconEvent.SpeedError.displayName = 'proto.domain.BeaconEvent.SpeedError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.BeaconEvent.GatePassError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.BeaconEvent.GatePassError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.BeaconEvent.GatePassError.displayName = 'proto.domain.BeaconEvent.GatePassError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.BeaconEvent.InvalidLocationChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.BeaconEvent.InvalidLocationChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.BeaconEvent.InvalidLocationChange.displayName = 'proto.domain.BeaconEvent.InvalidLocationChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domain.User.displayName = 'proto.domain.User';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.Test.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.Test.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.Test} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.Test.toObject = function(includeInstance, msg) {
  var f, obj = {
    a: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.Test}
 */
proto.domain.Test.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.Test;
  return proto.domain.Test.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.Test} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.Test}
 */
proto.domain.Test.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setA(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.Test.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.Test.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.Test} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.Test.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getA();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string A = 1;
 * @return {string}
 */
proto.domain.Test.prototype.getA = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.Test} returns this
 */
proto.domain.Test.prototype.setA = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.Beacon.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.Beacon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.Beacon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.Beacon.toObject = function(includeInstance, msg) {
  var f, obj = {
    major: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minor: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.Beacon}
 */
proto.domain.Beacon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.Beacon;
  return proto.domain.Beacon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.Beacon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.Beacon}
 */
proto.domain.Beacon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMajor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.Beacon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.Beacon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.Beacon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.Beacon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMajor();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMinor();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 major = 1;
 * @return {number}
 */
proto.domain.Beacon.prototype.getMajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.domain.Beacon} returns this
 */
proto.domain.Beacon.prototype.setMajor = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 minor = 2;
 * @return {number}
 */
proto.domain.Beacon.prototype.getMinor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.domain.Beacon} returns this
 */
proto.domain.Beacon.prototype.setMinor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.BeaconDto.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.BeaconDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.BeaconDto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    major: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minor: jspb.Message.getFieldWithDefault(msg, 2, 0),
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.BeaconDto}
 */
proto.domain.BeaconDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.BeaconDto;
  return proto.domain.BeaconDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.BeaconDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.BeaconDto}
 */
proto.domain.BeaconDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMajor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinor(value);
      break;
    case 3:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.BeaconDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.BeaconDto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.BeaconDto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconDto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMajor();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMinor();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional uint32 major = 1;
 * @return {number}
 */
proto.domain.BeaconDto.prototype.getMajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.domain.BeaconDto} returns this
 */
proto.domain.BeaconDto.prototype.setMajor = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 minor = 2;
 * @return {number}
 */
proto.domain.BeaconDto.prototype.getMinor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.domain.BeaconDto} returns this
 */
proto.domain.BeaconDto.prototype.setMinor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * map<string, string> labels = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.domain.BeaconDto.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.domain.BeaconDto} returns this
 */
proto.domain.BeaconDto.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.BeaconPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.BeaconPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.BeaconPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    beacon: (f = msg.getBeacon()) && proto.domain.Beacon.toObject(includeInstance, f),
    multilateration: (f = msg.getMultilateration()) && proto.domain.MultilaterationPosition.toObject(includeInstance, f),
    kalman: (f = msg.getKalman()) && proto.domain.KalmanPosition.toObject(includeInstance, f),
    tick: (f = msg.getTick()) && proto.domain.Tick.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.BeaconPosition}
 */
proto.domain.BeaconPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.BeaconPosition;
  return proto.domain.BeaconPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.BeaconPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.BeaconPosition}
 */
proto.domain.BeaconPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.domain.Beacon;
      reader.readMessage(value,proto.domain.Beacon.deserializeBinaryFromReader);
      msg.setBeacon(value);
      break;
    case 2:
      var value = new proto.domain.MultilaterationPosition;
      reader.readMessage(value,proto.domain.MultilaterationPosition.deserializeBinaryFromReader);
      msg.setMultilateration(value);
      break;
    case 3:
      var value = new proto.domain.KalmanPosition;
      reader.readMessage(value,proto.domain.KalmanPosition.deserializeBinaryFromReader);
      msg.setKalman(value);
      break;
    case 4:
      var value = new proto.domain.Tick;
      reader.readMessage(value,proto.domain.Tick.deserializeBinaryFromReader);
      msg.setTick(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.BeaconPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.BeaconPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.BeaconPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeacon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.domain.Beacon.serializeBinaryToWriter
    );
  }
  f = message.getMultilateration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.domain.MultilaterationPosition.serializeBinaryToWriter
    );
  }
  f = message.getKalman();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.domain.KalmanPosition.serializeBinaryToWriter
    );
  }
  f = message.getTick();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.domain.Tick.serializeBinaryToWriter
    );
  }
};


/**
 * optional Beacon beacon = 1;
 * @return {?proto.domain.Beacon}
 */
proto.domain.BeaconPosition.prototype.getBeacon = function() {
  return /** @type{?proto.domain.Beacon} */ (
    jspb.Message.getWrapperField(this, proto.domain.Beacon, 1));
};


/**
 * @param {?proto.domain.Beacon|undefined} value
 * @return {!proto.domain.BeaconPosition} returns this
*/
proto.domain.BeaconPosition.prototype.setBeacon = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.BeaconPosition} returns this
 */
proto.domain.BeaconPosition.prototype.clearBeacon = function() {
  return this.setBeacon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.BeaconPosition.prototype.hasBeacon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MultilaterationPosition multilateration = 2;
 * @return {?proto.domain.MultilaterationPosition}
 */
proto.domain.BeaconPosition.prototype.getMultilateration = function() {
  return /** @type{?proto.domain.MultilaterationPosition} */ (
    jspb.Message.getWrapperField(this, proto.domain.MultilaterationPosition, 2));
};


/**
 * @param {?proto.domain.MultilaterationPosition|undefined} value
 * @return {!proto.domain.BeaconPosition} returns this
*/
proto.domain.BeaconPosition.prototype.setMultilateration = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.BeaconPosition} returns this
 */
proto.domain.BeaconPosition.prototype.clearMultilateration = function() {
  return this.setMultilateration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.BeaconPosition.prototype.hasMultilateration = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional KalmanPosition kalman = 3;
 * @return {?proto.domain.KalmanPosition}
 */
proto.domain.BeaconPosition.prototype.getKalman = function() {
  return /** @type{?proto.domain.KalmanPosition} */ (
    jspb.Message.getWrapperField(this, proto.domain.KalmanPosition, 3));
};


/**
 * @param {?proto.domain.KalmanPosition|undefined} value
 * @return {!proto.domain.BeaconPosition} returns this
*/
proto.domain.BeaconPosition.prototype.setKalman = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.BeaconPosition} returns this
 */
proto.domain.BeaconPosition.prototype.clearKalman = function() {
  return this.setKalman(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.BeaconPosition.prototype.hasKalman = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Tick tick = 4;
 * @return {?proto.domain.Tick}
 */
proto.domain.BeaconPosition.prototype.getTick = function() {
  return /** @type{?proto.domain.Tick} */ (
    jspb.Message.getWrapperField(this, proto.domain.Tick, 4));
};


/**
 * @param {?proto.domain.Tick|undefined} value
 * @return {!proto.domain.BeaconPosition} returns this
*/
proto.domain.BeaconPosition.prototype.setTick = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.BeaconPosition} returns this
 */
proto.domain.BeaconPosition.prototype.clearTick = function() {
  return this.setTick(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.BeaconPosition.prototype.hasTick = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.MultilaterationPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.MultilaterationPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.MultilaterationPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.MultilaterationPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    point: (f = msg.getPoint()) && proto.domain.Point.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.MultilaterationPosition}
 */
proto.domain.MultilaterationPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.MultilaterationPosition;
  return proto.domain.MultilaterationPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.MultilaterationPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.MultilaterationPosition}
 */
proto.domain.MultilaterationPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.domain.Point;
      reader.readMessage(value,proto.domain.Point.deserializeBinaryFromReader);
      msg.setPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.MultilaterationPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.MultilaterationPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.MultilaterationPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.MultilaterationPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.domain.Point.serializeBinaryToWriter
    );
  }
};


/**
 * optional Point point = 1;
 * @return {?proto.domain.Point}
 */
proto.domain.MultilaterationPosition.prototype.getPoint = function() {
  return /** @type{?proto.domain.Point} */ (
    jspb.Message.getWrapperField(this, proto.domain.Point, 1));
};


/**
 * @param {?proto.domain.Point|undefined} value
 * @return {!proto.domain.MultilaterationPosition} returns this
*/
proto.domain.MultilaterationPosition.prototype.setPoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.MultilaterationPosition} returns this
 */
proto.domain.MultilaterationPosition.prototype.clearPoint = function() {
  return this.setPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.MultilaterationPosition.prototype.hasPoint = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.KalmanPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.KalmanPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.KalmanPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.KalmanPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    rawPoint: (f = msg.getRawPoint()) && proto.domain.Point.toObject(includeInstance, f),
    filteredPoint: (f = msg.getFilteredPoint()) && proto.domain.Point.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.KalmanPosition}
 */
proto.domain.KalmanPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.KalmanPosition;
  return proto.domain.KalmanPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.KalmanPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.KalmanPosition}
 */
proto.domain.KalmanPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.domain.Point;
      reader.readMessage(value,proto.domain.Point.deserializeBinaryFromReader);
      msg.setRawPoint(value);
      break;
    case 2:
      var value = new proto.domain.Point;
      reader.readMessage(value,proto.domain.Point.deserializeBinaryFromReader);
      msg.setFilteredPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.KalmanPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.KalmanPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.KalmanPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.KalmanPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRawPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.domain.Point.serializeBinaryToWriter
    );
  }
  f = message.getFilteredPoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.domain.Point.serializeBinaryToWriter
    );
  }
};


/**
 * optional Point raw_point = 1;
 * @return {?proto.domain.Point}
 */
proto.domain.KalmanPosition.prototype.getRawPoint = function() {
  return /** @type{?proto.domain.Point} */ (
    jspb.Message.getWrapperField(this, proto.domain.Point, 1));
};


/**
 * @param {?proto.domain.Point|undefined} value
 * @return {!proto.domain.KalmanPosition} returns this
*/
proto.domain.KalmanPosition.prototype.setRawPoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.KalmanPosition} returns this
 */
proto.domain.KalmanPosition.prototype.clearRawPoint = function() {
  return this.setRawPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.KalmanPosition.prototype.hasRawPoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Point filtered_point = 2;
 * @return {?proto.domain.Point}
 */
proto.domain.KalmanPosition.prototype.getFilteredPoint = function() {
  return /** @type{?proto.domain.Point} */ (
    jspb.Message.getWrapperField(this, proto.domain.Point, 2));
};


/**
 * @param {?proto.domain.Point|undefined} value
 * @return {!proto.domain.KalmanPosition} returns this
*/
proto.domain.KalmanPosition.prototype.setFilteredPoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.KalmanPosition} returns this
 */
proto.domain.KalmanPosition.prototype.clearFilteredPoint = function() {
  return this.setFilteredPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.KalmanPosition.prototype.hasFilteredPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.MeasurementDto.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.MeasurementDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.MeasurementDto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.MeasurementDto.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.MeasurementDto}
 */
proto.domain.MeasurementDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.MeasurementDto;
  return proto.domain.MeasurementDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.MeasurementDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.MeasurementDto}
 */
proto.domain.MeasurementDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.MeasurementDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.MeasurementDto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.MeasurementDto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.MeasurementDto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.ObservationDto.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.ObservationDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.ObservationDto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.ObservationDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    gatewayid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    deltaus: jspb.Message.getFieldWithDefault(msg, 5, 0),
    beacon: (f = msg.getBeacon()) && proto.domain.Beacon.toObject(includeInstance, f),
    rssi: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.ObservationDto}
 */
proto.domain.ObservationDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.ObservationDto;
  return proto.domain.ObservationDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.ObservationDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.ObservationDto}
 */
proto.domain.ObservationDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGatewayid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeltaus(value);
      break;
    case 3:
      var value = new proto.domain.Beacon;
      reader.readMessage(value,proto.domain.Beacon.deserializeBinaryFromReader);
      msg.setBeacon(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRssi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.ObservationDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.ObservationDto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.ObservationDto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.ObservationDto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGatewayid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDeltaus();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getBeacon();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.domain.Beacon.serializeBinaryToWriter
    );
  }
  f = message.getRssi();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional uint64 gatewayID = 1;
 * @return {number}
 */
proto.domain.ObservationDto.prototype.getGatewayid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.domain.ObservationDto} returns this
 */
proto.domain.ObservationDto.prototype.setGatewayid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.domain.ObservationDto.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.domain.ObservationDto} returns this
 */
proto.domain.ObservationDto.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 deltaUs = 5;
 * @return {number}
 */
proto.domain.ObservationDto.prototype.getDeltaus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.domain.ObservationDto} returns this
 */
proto.domain.ObservationDto.prototype.setDeltaus = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Beacon beacon = 3;
 * @return {?proto.domain.Beacon}
 */
proto.domain.ObservationDto.prototype.getBeacon = function() {
  return /** @type{?proto.domain.Beacon} */ (
    jspb.Message.getWrapperField(this, proto.domain.Beacon, 3));
};


/**
 * @param {?proto.domain.Beacon|undefined} value
 * @return {!proto.domain.ObservationDto} returns this
*/
proto.domain.ObservationDto.prototype.setBeacon = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.ObservationDto} returns this
 */
proto.domain.ObservationDto.prototype.clearBeacon = function() {
  return this.setBeacon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.ObservationDto.prototype.hasBeacon = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 rssi = 4;
 * @return {number}
 */
proto.domain.ObservationDto.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.domain.ObservationDto} returns this
 */
proto.domain.ObservationDto.prototype.setRssi = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.domain.GatewayObservationDto.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.GatewayObservationDto.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.GatewayObservationDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.GatewayObservationDto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.GatewayObservationDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    gatewayId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    advertisingGatewayId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    rssi: jspb.Message.getFieldWithDefault(msg, 5, 0),
    count: jspb.Message.getFieldWithDefault(msg, 6, 0),
    rssimean: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    rssivariance: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    dataList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.GatewayObservationDto}
 */
proto.domain.GatewayObservationDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.GatewayObservationDto;
  return proto.domain.GatewayObservationDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.GatewayObservationDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.GatewayObservationDto}
 */
proto.domain.GatewayObservationDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGatewayId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAdvertisingGatewayId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRssi(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRssimean(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRssivariance(value);
      break;
    case 9:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setDataList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.GatewayObservationDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.GatewayObservationDto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.GatewayObservationDto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.GatewayObservationDto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGatewayId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAdvertisingGatewayId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getRssi();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getRssimean();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getRssivariance();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writePackedInt32(
      9,
      f
    );
  }
};


/**
 * optional uint64 gateway_id = 2;
 * @return {number}
 */
proto.domain.GatewayObservationDto.prototype.getGatewayId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.domain.GatewayObservationDto} returns this
 */
proto.domain.GatewayObservationDto.prototype.setGatewayId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 advertising_gateway_id = 3;
 * @return {number}
 */
proto.domain.GatewayObservationDto.prototype.getAdvertisingGatewayId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.domain.GatewayObservationDto} returns this
 */
proto.domain.GatewayObservationDto.prototype.setAdvertisingGatewayId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.domain.GatewayObservationDto.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.domain.GatewayObservationDto} returns this
 */
proto.domain.GatewayObservationDto.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 rssi = 5;
 * @return {number}
 */
proto.domain.GatewayObservationDto.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.domain.GatewayObservationDto} returns this
 */
proto.domain.GatewayObservationDto.prototype.setRssi = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 count = 6;
 * @return {number}
 */
proto.domain.GatewayObservationDto.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.domain.GatewayObservationDto} returns this
 */
proto.domain.GatewayObservationDto.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional double rssiMean = 7;
 * @return {number}
 */
proto.domain.GatewayObservationDto.prototype.getRssimean = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domain.GatewayObservationDto} returns this
 */
proto.domain.GatewayObservationDto.prototype.setRssimean = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double rssiVariance = 8;
 * @return {number}
 */
proto.domain.GatewayObservationDto.prototype.getRssivariance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domain.GatewayObservationDto} returns this
 */
proto.domain.GatewayObservationDto.prototype.setRssivariance = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * repeated int32 data = 9;
 * @return {!Array<number>}
 */
proto.domain.GatewayObservationDto.prototype.getDataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.domain.GatewayObservationDto} returns this
 */
proto.domain.GatewayObservationDto.prototype.setDataList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.domain.GatewayObservationDto} returns this
 */
proto.domain.GatewayObservationDto.prototype.addData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.domain.GatewayObservationDto} returns this
 */
proto.domain.GatewayObservationDto.prototype.clearDataList = function() {
  return this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    levelid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.Point}
 */
proto.domain.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.Point;
  return proto.domain.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.Point}
 */
proto.domain.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevelid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getLevelid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.domain.Point.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domain.Point} returns this
 */
proto.domain.Point.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.domain.Point.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domain.Point} returns this
 */
proto.domain.Point.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int32 levelId = 3;
 * @return {number}
 */
proto.domain.Point.prototype.getLevelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.domain.Point} returns this
 */
proto.domain.Point.prototype.setLevelid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.domain.Polygon.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.Polygon.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.Polygon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.Polygon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.Polygon.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.domain.Point.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.Polygon}
 */
proto.domain.Polygon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.Polygon;
  return proto.domain.Polygon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.Polygon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.Polygon}
 */
proto.domain.Polygon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.domain.Point;
      reader.readMessage(value,proto.domain.Point.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.Polygon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.Polygon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.Polygon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.Polygon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.domain.Point.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Point points = 1;
 * @return {!Array<!proto.domain.Point>}
 */
proto.domain.Polygon.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.domain.Point>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.domain.Point, 1));
};


/**
 * @param {!Array<!proto.domain.Point>} value
 * @return {!proto.domain.Polygon} returns this
*/
proto.domain.Polygon.prototype.setPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.domain.Point=} opt_value
 * @param {number=} opt_index
 * @return {!proto.domain.Point}
 */
proto.domain.Polygon.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.domain.Point, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.domain.Polygon} returns this
 */
proto.domain.Polygon.prototype.clearPointsList = function() {
  return this.setPointsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.domain.DeploymentDto.repeatedFields_ = [5,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.DeploymentDto.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.DeploymentDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.DeploymentDto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.DeploymentDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    config: (f = msg.getConfig()) && proto.domain.DeploymentDto.Config.toObject(includeInstance, f),
    avatar: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gatewaysList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    map: (f = msg.getMap()) && proto.domain.DeploymentDto.Map.toObject(includeInstance, f),
    apiKeysList: jspb.Message.toObjectList(msg.getApiKeysList(),
    proto.domain.DeploymentDto.ApiKey.toObject, includeInstance),
    beaconMajor: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.DeploymentDto}
 */
proto.domain.DeploymentDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.DeploymentDto;
  return proto.domain.DeploymentDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.DeploymentDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.DeploymentDto}
 */
proto.domain.DeploymentDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.domain.DeploymentDto.Config;
      reader.readMessage(value,proto.domain.DeploymentDto.Config.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addGateways(value);
      break;
    case 6:
      var value = new proto.domain.DeploymentDto.Map;
      reader.readMessage(value,proto.domain.DeploymentDto.Map.deserializeBinaryFromReader);
      msg.setMap(value);
      break;
    case 7:
      var value = new proto.domain.DeploymentDto.ApiKey;
      reader.readMessage(value,proto.domain.DeploymentDto.ApiKey.deserializeBinaryFromReader);
      msg.addApiKeys(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBeaconMajor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.DeploymentDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.DeploymentDto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.DeploymentDto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.DeploymentDto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.domain.DeploymentDto.Config.serializeBinaryToWriter
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGatewaysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getMap();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.domain.DeploymentDto.Map.serializeBinaryToWriter
    );
  }
  f = message.getApiKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.domain.DeploymentDto.ApiKey.serializeBinaryToWriter
    );
  }
  f = message.getBeaconMajor();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.DeploymentDto.ApiKey.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.DeploymentDto.ApiKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.DeploymentDto.ApiKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.DeploymentDto.ApiKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    accessKey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    lastUsedAt: (f = msg.getLastUsedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.DeploymentDto.ApiKey}
 */
proto.domain.DeploymentDto.ApiKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.DeploymentDto.ApiKey;
  return proto.domain.DeploymentDto.ApiKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.DeploymentDto.ApiKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.DeploymentDto.ApiKey}
 */
proto.domain.DeploymentDto.ApiKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessKey(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastUsedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.DeploymentDto.ApiKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.DeploymentDto.ApiKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.DeploymentDto.ApiKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.DeploymentDto.ApiKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAccessKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastUsedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.domain.DeploymentDto.ApiKey.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.DeploymentDto.ApiKey} returns this
 */
proto.domain.DeploymentDto.ApiKey.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.domain.DeploymentDto.ApiKey.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.DeploymentDto.ApiKey} returns this
 */
proto.domain.DeploymentDto.ApiKey.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string access_key = 3;
 * @return {string}
 */
proto.domain.DeploymentDto.ApiKey.prototype.getAccessKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.DeploymentDto.ApiKey} returns this
 */
proto.domain.DeploymentDto.ApiKey.prototype.setAccessKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.domain.DeploymentDto.ApiKey.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.domain.DeploymentDto.ApiKey} returns this
*/
proto.domain.DeploymentDto.ApiKey.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.DeploymentDto.ApiKey} returns this
 */
proto.domain.DeploymentDto.ApiKey.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.DeploymentDto.ApiKey.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp last_used_at = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.domain.DeploymentDto.ApiKey.prototype.getLastUsedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.domain.DeploymentDto.ApiKey} returns this
*/
proto.domain.DeploymentDto.ApiKey.prototype.setLastUsedAt = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.DeploymentDto.ApiKey} returns this
 */
proto.domain.DeploymentDto.ApiKey.prototype.clearLastUsedAt = function() {
  return this.setLastUsedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.DeploymentDto.ApiKey.prototype.hasLastUsedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.DeploymentDto.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.DeploymentDto.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.DeploymentDto.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.DeploymentDto.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    tickSize: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    calibrationInterval: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    pipelineParamsMap: (f = msg.getPipelineParamsMap()) ? f.toObject(includeInstance, undefined) : [],
    beaconMajor: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.DeploymentDto.Config}
 */
proto.domain.DeploymentDto.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.DeploymentDto.Config;
  return proto.domain.DeploymentDto.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.DeploymentDto.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.DeploymentDto.Config}
 */
proto.domain.DeploymentDto.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTickSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCalibrationInterval(value);
      break;
    case 3:
      var value = msg.getPipelineParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readFloat, null, "", 0.0);
         });
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBeaconMajor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.DeploymentDto.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.DeploymentDto.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.DeploymentDto.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.DeploymentDto.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTickSize();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getCalibrationInterval();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getPipelineParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeFloat);
  }
  f = message.getBeaconMajor();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional float tick_size = 1;
 * @return {number}
 */
proto.domain.DeploymentDto.Config.prototype.getTickSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domain.DeploymentDto.Config} returns this
 */
proto.domain.DeploymentDto.Config.prototype.setTickSize = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float calibration_interval = 2;
 * @return {number}
 */
proto.domain.DeploymentDto.Config.prototype.getCalibrationInterval = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domain.DeploymentDto.Config} returns this
 */
proto.domain.DeploymentDto.Config.prototype.setCalibrationInterval = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * map<string, float> pipeline_params = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.domain.DeploymentDto.Config.prototype.getPipelineParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.domain.DeploymentDto.Config} returns this
 */
proto.domain.DeploymentDto.Config.prototype.clearPipelineParamsMap = function() {
  this.getPipelineParamsMap().clear();
  return this;};


/**
 * optional int32 beacon_major = 4;
 * @return {number}
 */
proto.domain.DeploymentDto.Config.prototype.getBeaconMajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.domain.DeploymentDto.Config} returns this
 */
proto.domain.DeploymentDto.Config.prototype.setBeaconMajor = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.domain.DeploymentDto.Map.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.DeploymentDto.Map.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.DeploymentDto.Map.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.DeploymentDto.Map} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.DeploymentDto.Map.toObject = function(includeInstance, msg) {
  var f, obj = {
    zonesList: jspb.Message.toObjectList(msg.getZonesList(),
    proto.domain.DeploymentDto.Map.Zone.toObject, includeInstance),
    featureCollection: (f = msg.getFeatureCollection()) && proto.domain.FeatureCollection.toObject(includeInstance, f),
    featureCollectionJson: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.DeploymentDto.Map}
 */
proto.domain.DeploymentDto.Map.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.DeploymentDto.Map;
  return proto.domain.DeploymentDto.Map.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.DeploymentDto.Map} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.DeploymentDto.Map}
 */
proto.domain.DeploymentDto.Map.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.domain.DeploymentDto.Map.Zone;
      reader.readMessage(value,proto.domain.DeploymentDto.Map.Zone.deserializeBinaryFromReader);
      msg.addZones(value);
      break;
    case 2:
      var value = new proto.domain.FeatureCollection;
      reader.readMessage(value,proto.domain.FeatureCollection.deserializeBinaryFromReader);
      msg.setFeatureCollection(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureCollectionJson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.DeploymentDto.Map.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.DeploymentDto.Map.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.DeploymentDto.Map} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.DeploymentDto.Map.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZonesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.domain.DeploymentDto.Map.Zone.serializeBinaryToWriter
    );
  }
  f = message.getFeatureCollection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.domain.FeatureCollection.serializeBinaryToWriter
    );
  }
  f = message.getFeatureCollectionJson();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.DeploymentDto.Map.Zone.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.DeploymentDto.Map.Zone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.DeploymentDto.Map.Zone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.DeploymentDto.Map.Zone.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    color: jspb.Message.getFieldWithDefault(msg, 3, ""),
    polygon: (f = msg.getPolygon()) && proto.domain.Polygon.toObject(includeInstance, f),
    level: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.DeploymentDto.Map.Zone}
 */
proto.domain.DeploymentDto.Map.Zone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.DeploymentDto.Map.Zone;
  return proto.domain.DeploymentDto.Map.Zone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.DeploymentDto.Map.Zone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.DeploymentDto.Map.Zone}
 */
proto.domain.DeploymentDto.Map.Zone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 4:
      var value = new proto.domain.Polygon;
      reader.readMessage(value,proto.domain.Polygon.deserializeBinaryFromReader);
      msg.setPolygon(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.DeploymentDto.Map.Zone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.DeploymentDto.Map.Zone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.DeploymentDto.Map.Zone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.DeploymentDto.Map.Zone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPolygon();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.domain.Polygon.serializeBinaryToWriter
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.domain.DeploymentDto.Map.Zone.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.DeploymentDto.Map.Zone} returns this
 */
proto.domain.DeploymentDto.Map.Zone.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.domain.DeploymentDto.Map.Zone.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.DeploymentDto.Map.Zone} returns this
 */
proto.domain.DeploymentDto.Map.Zone.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string color = 3;
 * @return {string}
 */
proto.domain.DeploymentDto.Map.Zone.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.DeploymentDto.Map.Zone} returns this
 */
proto.domain.DeploymentDto.Map.Zone.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Polygon polygon = 4;
 * @return {?proto.domain.Polygon}
 */
proto.domain.DeploymentDto.Map.Zone.prototype.getPolygon = function() {
  return /** @type{?proto.domain.Polygon} */ (
    jspb.Message.getWrapperField(this, proto.domain.Polygon, 4));
};


/**
 * @param {?proto.domain.Polygon|undefined} value
 * @return {!proto.domain.DeploymentDto.Map.Zone} returns this
*/
proto.domain.DeploymentDto.Map.Zone.prototype.setPolygon = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.DeploymentDto.Map.Zone} returns this
 */
proto.domain.DeploymentDto.Map.Zone.prototype.clearPolygon = function() {
  return this.setPolygon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.DeploymentDto.Map.Zone.prototype.hasPolygon = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 level = 5;
 * @return {number}
 */
proto.domain.DeploymentDto.Map.Zone.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.domain.DeploymentDto.Map.Zone} returns this
 */
proto.domain.DeploymentDto.Map.Zone.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Zone zones = 1;
 * @return {!Array<!proto.domain.DeploymentDto.Map.Zone>}
 */
proto.domain.DeploymentDto.Map.prototype.getZonesList = function() {
  return /** @type{!Array<!proto.domain.DeploymentDto.Map.Zone>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.domain.DeploymentDto.Map.Zone, 1));
};


/**
 * @param {!Array<!proto.domain.DeploymentDto.Map.Zone>} value
 * @return {!proto.domain.DeploymentDto.Map} returns this
*/
proto.domain.DeploymentDto.Map.prototype.setZonesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.domain.DeploymentDto.Map.Zone=} opt_value
 * @param {number=} opt_index
 * @return {!proto.domain.DeploymentDto.Map.Zone}
 */
proto.domain.DeploymentDto.Map.prototype.addZones = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.domain.DeploymentDto.Map.Zone, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.domain.DeploymentDto.Map} returns this
 */
proto.domain.DeploymentDto.Map.prototype.clearZonesList = function() {
  return this.setZonesList([]);
};


/**
 * optional FeatureCollection feature_collection = 2;
 * @return {?proto.domain.FeatureCollection}
 */
proto.domain.DeploymentDto.Map.prototype.getFeatureCollection = function() {
  return /** @type{?proto.domain.FeatureCollection} */ (
    jspb.Message.getWrapperField(this, proto.domain.FeatureCollection, 2));
};


/**
 * @param {?proto.domain.FeatureCollection|undefined} value
 * @return {!proto.domain.DeploymentDto.Map} returns this
*/
proto.domain.DeploymentDto.Map.prototype.setFeatureCollection = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.DeploymentDto.Map} returns this
 */
proto.domain.DeploymentDto.Map.prototype.clearFeatureCollection = function() {
  return this.setFeatureCollection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.DeploymentDto.Map.prototype.hasFeatureCollection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string feature_collection_json = 3;
 * @return {string}
 */
proto.domain.DeploymentDto.Map.prototype.getFeatureCollectionJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.DeploymentDto.Map} returns this
 */
proto.domain.DeploymentDto.Map.prototype.setFeatureCollectionJson = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.domain.DeploymentDto.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.DeploymentDto} returns this
 */
proto.domain.DeploymentDto.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.domain.DeploymentDto.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.DeploymentDto} returns this
 */
proto.domain.DeploymentDto.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Config config = 3;
 * @return {?proto.domain.DeploymentDto.Config}
 */
proto.domain.DeploymentDto.prototype.getConfig = function() {
  return /** @type{?proto.domain.DeploymentDto.Config} */ (
    jspb.Message.getWrapperField(this, proto.domain.DeploymentDto.Config, 3));
};


/**
 * @param {?proto.domain.DeploymentDto.Config|undefined} value
 * @return {!proto.domain.DeploymentDto} returns this
*/
proto.domain.DeploymentDto.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.DeploymentDto} returns this
 */
proto.domain.DeploymentDto.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.DeploymentDto.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string avatar = 4;
 * @return {string}
 */
proto.domain.DeploymentDto.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.DeploymentDto} returns this
 */
proto.domain.DeploymentDto.prototype.setAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string gateways = 5;
 * @return {!Array<string>}
 */
proto.domain.DeploymentDto.prototype.getGatewaysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.domain.DeploymentDto} returns this
 */
proto.domain.DeploymentDto.prototype.setGatewaysList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.domain.DeploymentDto} returns this
 */
proto.domain.DeploymentDto.prototype.addGateways = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.domain.DeploymentDto} returns this
 */
proto.domain.DeploymentDto.prototype.clearGatewaysList = function() {
  return this.setGatewaysList([]);
};


/**
 * optional Map map = 6;
 * @return {?proto.domain.DeploymentDto.Map}
 */
proto.domain.DeploymentDto.prototype.getMap = function() {
  return /** @type{?proto.domain.DeploymentDto.Map} */ (
    jspb.Message.getWrapperField(this, proto.domain.DeploymentDto.Map, 6));
};


/**
 * @param {?proto.domain.DeploymentDto.Map|undefined} value
 * @return {!proto.domain.DeploymentDto} returns this
*/
proto.domain.DeploymentDto.prototype.setMap = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.DeploymentDto} returns this
 */
proto.domain.DeploymentDto.prototype.clearMap = function() {
  return this.setMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.DeploymentDto.prototype.hasMap = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated ApiKey api_keys = 7;
 * @return {!Array<!proto.domain.DeploymentDto.ApiKey>}
 */
proto.domain.DeploymentDto.prototype.getApiKeysList = function() {
  return /** @type{!Array<!proto.domain.DeploymentDto.ApiKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.domain.DeploymentDto.ApiKey, 7));
};


/**
 * @param {!Array<!proto.domain.DeploymentDto.ApiKey>} value
 * @return {!proto.domain.DeploymentDto} returns this
*/
proto.domain.DeploymentDto.prototype.setApiKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.domain.DeploymentDto.ApiKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.domain.DeploymentDto.ApiKey}
 */
proto.domain.DeploymentDto.prototype.addApiKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.domain.DeploymentDto.ApiKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.domain.DeploymentDto} returns this
 */
proto.domain.DeploymentDto.prototype.clearApiKeysList = function() {
  return this.setApiKeysList([]);
};


/**
 * optional int32 beacon_major = 8;
 * @return {number}
 */
proto.domain.DeploymentDto.prototype.getBeaconMajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.domain.DeploymentDto} returns this
 */
proto.domain.DeploymentDto.prototype.setBeaconMajor = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.Tick.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.Tick.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.Tick} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.Tick.toObject = function(includeInstance, msg) {
  var f, obj = {
    duration: (f = msg.getDuration()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.Tick}
 */
proto.domain.Tick.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.Tick;
  return proto.domain.Tick.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.Tick} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.Tick}
 */
proto.domain.Tick.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.Tick.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.Tick.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.Tick} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.Tick.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional google.protobuf.Duration duration = 1;
 * @return {?proto.google.protobuf.Duration}
 */
proto.domain.Tick.prototype.getDuration = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 1));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.domain.Tick} returns this
*/
proto.domain.Tick.prototype.setDuration = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.Tick} returns this
 */
proto.domain.Tick.prototype.clearDuration = function() {
  return this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.Tick.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 value = 2;
 * @return {number}
 */
proto.domain.Tick.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.domain.Tick} returns this
 */
proto.domain.Tick.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.BeaconTimelineRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.BeaconTimelineRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.BeaconTimelineRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconTimelineRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    zone: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fromTime: (f = msg.getFromTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    toTime: (f = msg.getToTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.BeaconTimelineRecord}
 */
proto.domain.BeaconTimelineRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.BeaconTimelineRecord;
  return proto.domain.BeaconTimelineRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.BeaconTimelineRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.BeaconTimelineRecord}
 */
proto.domain.BeaconTimelineRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZone(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFromTime(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setToTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.BeaconTimelineRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.BeaconTimelineRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.BeaconTimelineRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconTimelineRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZone();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFromTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getToTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string zone = 1;
 * @return {string}
 */
proto.domain.BeaconTimelineRecord.prototype.getZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.BeaconTimelineRecord} returns this
 */
proto.domain.BeaconTimelineRecord.prototype.setZone = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp from_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.domain.BeaconTimelineRecord.prototype.getFromTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.domain.BeaconTimelineRecord} returns this
*/
proto.domain.BeaconTimelineRecord.prototype.setFromTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.BeaconTimelineRecord} returns this
 */
proto.domain.BeaconTimelineRecord.prototype.clearFromTime = function() {
  return this.setFromTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.BeaconTimelineRecord.prototype.hasFromTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp to_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.domain.BeaconTimelineRecord.prototype.getToTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.domain.BeaconTimelineRecord} returns this
*/
proto.domain.BeaconTimelineRecord.prototype.setToTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.BeaconTimelineRecord} returns this
 */
proto.domain.BeaconTimelineRecord.prototype.clearToTime = function() {
  return this.setToTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.BeaconTimelineRecord.prototype.hasToTime = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.domain.BeaconTimeline.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.BeaconTimeline.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.BeaconTimeline.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.BeaconTimeline} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconTimeline.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.domain.BeaconTimeline.Record.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.BeaconTimeline}
 */
proto.domain.BeaconTimeline.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.BeaconTimeline;
  return proto.domain.BeaconTimeline.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.BeaconTimeline} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.BeaconTimeline}
 */
proto.domain.BeaconTimeline.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.domain.BeaconTimeline.Record;
      reader.readMessage(value,proto.domain.BeaconTimeline.Record.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.BeaconTimeline.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.BeaconTimeline.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.BeaconTimeline} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconTimeline.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.domain.BeaconTimeline.Record.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.BeaconTimeline.Record.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.BeaconTimeline.Record.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.BeaconTimeline.Record} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconTimeline.Record.toObject = function(includeInstance, msg) {
  var f, obj = {
    zone: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fromTime: (f = msg.getFromTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    toTime: (f = msg.getToTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.BeaconTimeline.Record}
 */
proto.domain.BeaconTimeline.Record.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.BeaconTimeline.Record;
  return proto.domain.BeaconTimeline.Record.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.BeaconTimeline.Record} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.BeaconTimeline.Record}
 */
proto.domain.BeaconTimeline.Record.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZone(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFromTime(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setToTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.BeaconTimeline.Record.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.BeaconTimeline.Record.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.BeaconTimeline.Record} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconTimeline.Record.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZone();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFromTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getToTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string zone = 1;
 * @return {string}
 */
proto.domain.BeaconTimeline.Record.prototype.getZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.BeaconTimeline.Record} returns this
 */
proto.domain.BeaconTimeline.Record.prototype.setZone = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp from_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.domain.BeaconTimeline.Record.prototype.getFromTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.domain.BeaconTimeline.Record} returns this
*/
proto.domain.BeaconTimeline.Record.prototype.setFromTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.BeaconTimeline.Record} returns this
 */
proto.domain.BeaconTimeline.Record.prototype.clearFromTime = function() {
  return this.setFromTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.BeaconTimeline.Record.prototype.hasFromTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp to_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.domain.BeaconTimeline.Record.prototype.getToTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.domain.BeaconTimeline.Record} returns this
*/
proto.domain.BeaconTimeline.Record.prototype.setToTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.BeaconTimeline.Record} returns this
 */
proto.domain.BeaconTimeline.Record.prototype.clearToTime = function() {
  return this.setToTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.BeaconTimeline.Record.prototype.hasToTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Record records = 1;
 * @return {!Array<!proto.domain.BeaconTimeline.Record>}
 */
proto.domain.BeaconTimeline.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.domain.BeaconTimeline.Record>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.domain.BeaconTimeline.Record, 1));
};


/**
 * @param {!Array<!proto.domain.BeaconTimeline.Record>} value
 * @return {!proto.domain.BeaconTimeline} returns this
*/
proto.domain.BeaconTimeline.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.domain.BeaconTimeline.Record=} opt_value
 * @param {number=} opt_index
 * @return {!proto.domain.BeaconTimeline.Record}
 */
proto.domain.BeaconTimeline.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.domain.BeaconTimeline.Record, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.domain.BeaconTimeline} returns this
 */
proto.domain.BeaconTimeline.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.domain.SystemEvent.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.domain.SystemEvent.EventCase = {
  EVENT_NOT_SET: 0,
  PIPELINE_EVENT: 1,
  BEACON_TIMELINE_UPDATE_EVENT: 2
};

/**
 * @return {proto.domain.SystemEvent.EventCase}
 */
proto.domain.SystemEvent.prototype.getEventCase = function() {
  return /** @type {proto.domain.SystemEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.domain.SystemEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.SystemEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.SystemEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.SystemEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.SystemEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    pipelineEvent: (f = msg.getPipelineEvent()) && proto.domain.SystemEvent.PipelineEvent.toObject(includeInstance, f),
    beaconTimelineUpdateEvent: (f = msg.getBeaconTimelineUpdateEvent()) && proto.domain.SystemEvent.BeaconTimelineUpdateEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.SystemEvent}
 */
proto.domain.SystemEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.SystemEvent;
  return proto.domain.SystemEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.SystemEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.SystemEvent}
 */
proto.domain.SystemEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.domain.SystemEvent.PipelineEvent;
      reader.readMessage(value,proto.domain.SystemEvent.PipelineEvent.deserializeBinaryFromReader);
      msg.setPipelineEvent(value);
      break;
    case 2:
      var value = new proto.domain.SystemEvent.BeaconTimelineUpdateEvent;
      reader.readMessage(value,proto.domain.SystemEvent.BeaconTimelineUpdateEvent.deserializeBinaryFromReader);
      msg.setBeaconTimelineUpdateEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.SystemEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.SystemEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.SystemEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.SystemEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPipelineEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.domain.SystemEvent.PipelineEvent.serializeBinaryToWriter
    );
  }
  f = message.getBeaconTimelineUpdateEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.domain.SystemEvent.BeaconTimelineUpdateEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.SystemEvent.PipelineEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.SystemEvent.PipelineEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.SystemEvent.PipelineEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.SystemEvent.PipelineEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    tick: (f = msg.getTick()) && proto.domain.Tick.toObject(includeInstance, f),
    deploymentId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.SystemEvent.PipelineEvent}
 */
proto.domain.SystemEvent.PipelineEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.SystemEvent.PipelineEvent;
  return proto.domain.SystemEvent.PipelineEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.SystemEvent.PipelineEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.SystemEvent.PipelineEvent}
 */
proto.domain.SystemEvent.PipelineEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.domain.Tick;
      reader.readMessage(value,proto.domain.Tick.deserializeBinaryFromReader);
      msg.setTick(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeploymentId(value);
      break;
    case 3:
      var value = /** @type {!proto.domain.SystemEvent.PipelineEvent.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.SystemEvent.PipelineEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.SystemEvent.PipelineEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.SystemEvent.PipelineEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.SystemEvent.PipelineEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTick();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.domain.Tick.serializeBinaryToWriter
    );
  }
  f = message.getDeploymentId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.domain.SystemEvent.PipelineEvent.State = {
  UNDEFINED: 0,
  START: 1,
  DONE: 2
};

/**
 * optional Tick tick = 1;
 * @return {?proto.domain.Tick}
 */
proto.domain.SystemEvent.PipelineEvent.prototype.getTick = function() {
  return /** @type{?proto.domain.Tick} */ (
    jspb.Message.getWrapperField(this, proto.domain.Tick, 1));
};


/**
 * @param {?proto.domain.Tick|undefined} value
 * @return {!proto.domain.SystemEvent.PipelineEvent} returns this
*/
proto.domain.SystemEvent.PipelineEvent.prototype.setTick = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.SystemEvent.PipelineEvent} returns this
 */
proto.domain.SystemEvent.PipelineEvent.prototype.clearTick = function() {
  return this.setTick(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.SystemEvent.PipelineEvent.prototype.hasTick = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string deployment_id = 2;
 * @return {string}
 */
proto.domain.SystemEvent.PipelineEvent.prototype.getDeploymentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.SystemEvent.PipelineEvent} returns this
 */
proto.domain.SystemEvent.PipelineEvent.prototype.setDeploymentId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional State state = 3;
 * @return {!proto.domain.SystemEvent.PipelineEvent.State}
 */
proto.domain.SystemEvent.PipelineEvent.prototype.getState = function() {
  return /** @type {!proto.domain.SystemEvent.PipelineEvent.State} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.domain.SystemEvent.PipelineEvent.State} value
 * @return {!proto.domain.SystemEvent.PipelineEvent} returns this
 */
proto.domain.SystemEvent.PipelineEvent.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.SystemEvent.BeaconTimelineUpdateEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.SystemEvent.BeaconTimelineUpdateEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.SystemEvent.BeaconTimelineUpdateEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.SystemEvent.BeaconTimelineUpdateEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    deploymentId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    beaconTimelineMap: (f = msg.getBeaconTimelineMap()) ? f.toObject(includeInstance, proto.domain.BeaconTimeline.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.SystemEvent.BeaconTimelineUpdateEvent}
 */
proto.domain.SystemEvent.BeaconTimelineUpdateEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.SystemEvent.BeaconTimelineUpdateEvent;
  return proto.domain.SystemEvent.BeaconTimelineUpdateEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.SystemEvent.BeaconTimelineUpdateEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.SystemEvent.BeaconTimelineUpdateEvent}
 */
proto.domain.SystemEvent.BeaconTimelineUpdateEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeploymentId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 3:
      var value = msg.getBeaconTimelineMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.domain.BeaconTimeline.deserializeBinaryFromReader, 0, new proto.domain.BeaconTimeline());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.SystemEvent.BeaconTimelineUpdateEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.SystemEvent.BeaconTimelineUpdateEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.SystemEvent.BeaconTimelineUpdateEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.SystemEvent.BeaconTimelineUpdateEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeploymentId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getBeaconTimelineMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.domain.BeaconTimeline.serializeBinaryToWriter);
  }
};


/**
 * optional string deployment_id = 1;
 * @return {string}
 */
proto.domain.SystemEvent.BeaconTimelineUpdateEvent.prototype.getDeploymentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.SystemEvent.BeaconTimelineUpdateEvent} returns this
 */
proto.domain.SystemEvent.BeaconTimelineUpdateEvent.prototype.setDeploymentId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.domain.SystemEvent.BeaconTimelineUpdateEvent.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.domain.SystemEvent.BeaconTimelineUpdateEvent} returns this
*/
proto.domain.SystemEvent.BeaconTimelineUpdateEvent.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.SystemEvent.BeaconTimelineUpdateEvent} returns this
 */
proto.domain.SystemEvent.BeaconTimelineUpdateEvent.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.SystemEvent.BeaconTimelineUpdateEvent.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<int32, BeaconTimeline> beacon_timeline = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.domain.BeaconTimeline>}
 */
proto.domain.SystemEvent.BeaconTimelineUpdateEvent.prototype.getBeaconTimelineMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.domain.BeaconTimeline>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.domain.BeaconTimeline));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.domain.SystemEvent.BeaconTimelineUpdateEvent} returns this
 */
proto.domain.SystemEvent.BeaconTimelineUpdateEvent.prototype.clearBeaconTimelineMap = function() {
  this.getBeaconTimelineMap().clear();
  return this;};


/**
 * optional PipelineEvent pipeline_event = 1;
 * @return {?proto.domain.SystemEvent.PipelineEvent}
 */
proto.domain.SystemEvent.prototype.getPipelineEvent = function() {
  return /** @type{?proto.domain.SystemEvent.PipelineEvent} */ (
    jspb.Message.getWrapperField(this, proto.domain.SystemEvent.PipelineEvent, 1));
};


/**
 * @param {?proto.domain.SystemEvent.PipelineEvent|undefined} value
 * @return {!proto.domain.SystemEvent} returns this
*/
proto.domain.SystemEvent.prototype.setPipelineEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.domain.SystemEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.SystemEvent} returns this
 */
proto.domain.SystemEvent.prototype.clearPipelineEvent = function() {
  return this.setPipelineEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.SystemEvent.prototype.hasPipelineEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BeaconTimelineUpdateEvent beacon_timeline_update_event = 2;
 * @return {?proto.domain.SystemEvent.BeaconTimelineUpdateEvent}
 */
proto.domain.SystemEvent.prototype.getBeaconTimelineUpdateEvent = function() {
  return /** @type{?proto.domain.SystemEvent.BeaconTimelineUpdateEvent} */ (
    jspb.Message.getWrapperField(this, proto.domain.SystemEvent.BeaconTimelineUpdateEvent, 2));
};


/**
 * @param {?proto.domain.SystemEvent.BeaconTimelineUpdateEvent|undefined} value
 * @return {!proto.domain.SystemEvent} returns this
*/
proto.domain.SystemEvent.prototype.setBeaconTimelineUpdateEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.domain.SystemEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.SystemEvent} returns this
 */
proto.domain.SystemEvent.prototype.clearBeaconTimelineUpdateEvent = function() {
  return this.setBeaconTimelineUpdateEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.SystemEvent.prototype.hasBeaconTimelineUpdateEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.domain.FeatureCollection.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.FeatureCollection.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.FeatureCollection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.FeatureCollection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.FeatureCollection.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    featuresList: jspb.Message.toObjectList(msg.getFeaturesList(),
    proto.domain.Feature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.FeatureCollection}
 */
proto.domain.FeatureCollection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.FeatureCollection;
  return proto.domain.FeatureCollection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.FeatureCollection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.FeatureCollection}
 */
proto.domain.FeatureCollection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.domain.Feature;
      reader.readMessage(value,proto.domain.Feature.deserializeBinaryFromReader);
      msg.addFeatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.FeatureCollection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.FeatureCollection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.FeatureCollection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.FeatureCollection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.domain.Feature.serializeBinaryToWriter
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.domain.FeatureCollection.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.FeatureCollection} returns this
 */
proto.domain.FeatureCollection.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Feature features = 2;
 * @return {!Array<!proto.domain.Feature>}
 */
proto.domain.FeatureCollection.prototype.getFeaturesList = function() {
  return /** @type{!Array<!proto.domain.Feature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.domain.Feature, 2));
};


/**
 * @param {!Array<!proto.domain.Feature>} value
 * @return {!proto.domain.FeatureCollection} returns this
*/
proto.domain.FeatureCollection.prototype.setFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.domain.Feature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.domain.Feature}
 */
proto.domain.FeatureCollection.prototype.addFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.domain.Feature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.domain.FeatureCollection} returns this
 */
proto.domain.FeatureCollection.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.Feature.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.Feature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.Feature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.Feature.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    geometry: (f = msg.getGeometry()) && proto.domain.Geometry.toObject(includeInstance, f),
    properties: (f = msg.getProperties()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.Feature}
 */
proto.domain.Feature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.Feature;
  return proto.domain.Feature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.Feature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.Feature}
 */
proto.domain.Feature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = new proto.domain.Geometry;
      reader.readMessage(value,proto.domain.Geometry.deserializeBinaryFromReader);
      msg.setGeometry(value);
      break;
    case 4:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.Feature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.Feature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.Feature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.Feature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGeometry();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.domain.Geometry.serializeBinaryToWriter
    );
  }
  f = message.getProperties();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.domain.Feature.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.Feature} returns this
 */
proto.domain.Feature.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.domain.Feature.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.Feature} returns this
 */
proto.domain.Feature.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Geometry geometry = 3;
 * @return {?proto.domain.Geometry}
 */
proto.domain.Feature.prototype.getGeometry = function() {
  return /** @type{?proto.domain.Geometry} */ (
    jspb.Message.getWrapperField(this, proto.domain.Geometry, 3));
};


/**
 * @param {?proto.domain.Geometry|undefined} value
 * @return {!proto.domain.Feature} returns this
*/
proto.domain.Feature.prototype.setGeometry = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.Feature} returns this
 */
proto.domain.Feature.prototype.clearGeometry = function() {
  return this.setGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.Feature.prototype.hasGeometry = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Struct properties = 4;
 * @return {?proto.google.protobuf.Struct}
 */
proto.domain.Feature.prototype.getProperties = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 4));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.domain.Feature} returns this
*/
proto.domain.Feature.prototype.setProperties = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.Feature} returns this
 */
proto.domain.Feature.prototype.clearProperties = function() {
  return this.setProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.Feature.prototype.hasProperties = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.domain.Geometry.repeatedFields_ = [4,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.Geometry.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.Geometry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.Geometry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.Geometry.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    coordinatesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 4)) == null ? undefined : f,
    geometriesList: jspb.Message.toObjectList(msg.getGeometriesList(),
    proto.domain.Geometry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.Geometry}
 */
proto.domain.Geometry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.Geometry;
  return proto.domain.Geometry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.Geometry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.Geometry}
 */
proto.domain.Geometry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setCoordinatesList(value);
      break;
    case 3:
      var value = new proto.domain.Geometry;
      reader.readMessage(value,proto.domain.Geometry.deserializeBinaryFromReader);
      msg.addGeometries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.Geometry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.Geometry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.Geometry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.Geometry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCoordinatesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      4,
      f
    );
  }
  f = message.getGeometriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.domain.Geometry.serializeBinaryToWriter
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.domain.Geometry.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.Geometry} returns this
 */
proto.domain.Geometry.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated double coordinates = 4;
 * @return {!Array<number>}
 */
proto.domain.Geometry.prototype.getCoordinatesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.domain.Geometry} returns this
 */
proto.domain.Geometry.prototype.setCoordinatesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.domain.Geometry} returns this
 */
proto.domain.Geometry.prototype.addCoordinates = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.domain.Geometry} returns this
 */
proto.domain.Geometry.prototype.clearCoordinatesList = function() {
  return this.setCoordinatesList([]);
};


/**
 * repeated Geometry geometries = 3;
 * @return {!Array<!proto.domain.Geometry>}
 */
proto.domain.Geometry.prototype.getGeometriesList = function() {
  return /** @type{!Array<!proto.domain.Geometry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.domain.Geometry, 3));
};


/**
 * @param {!Array<!proto.domain.Geometry>} value
 * @return {!proto.domain.Geometry} returns this
*/
proto.domain.Geometry.prototype.setGeometriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.domain.Geometry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.domain.Geometry}
 */
proto.domain.Geometry.prototype.addGeometries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.domain.Geometry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.domain.Geometry} returns this
 */
proto.domain.Geometry.prototype.clearGeometriesList = function() {
  return this.setGeometriesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.domain.BeaconEvent.oneofGroups_ = [[3,4,5,6]];

/**
 * @enum {number}
 */
proto.domain.BeaconEvent.EventCase = {
  EVENT_NOT_SET: 0,
  LOCATION_CHANGE: 3,
  SPEED_ERROR: 4,
  GATE_PASS_ERROR: 5,
  INVALID_LOCATION_CHANGE: 6
};

/**
 * @return {proto.domain.BeaconEvent.EventCase}
 */
proto.domain.BeaconEvent.prototype.getEventCase = function() {
  return /** @type {proto.domain.BeaconEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.domain.BeaconEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.BeaconEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.BeaconEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.BeaconEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    beacon: (f = msg.getBeacon()) && proto.domain.Beacon.toObject(includeInstance, f),
    locationChange: (f = msg.getLocationChange()) && proto.domain.BeaconEvent.LocationChange.toObject(includeInstance, f),
    speedError: (f = msg.getSpeedError()) && proto.domain.BeaconEvent.SpeedError.toObject(includeInstance, f),
    gatePassError: (f = msg.getGatePassError()) && proto.domain.BeaconEvent.GatePassError.toObject(includeInstance, f),
    invalidLocationChange: (f = msg.getInvalidLocationChange()) && proto.domain.BeaconEvent.InvalidLocationChange.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.BeaconEvent}
 */
proto.domain.BeaconEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.BeaconEvent;
  return proto.domain.BeaconEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.BeaconEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.BeaconEvent}
 */
proto.domain.BeaconEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 2:
      var value = new proto.domain.Beacon;
      reader.readMessage(value,proto.domain.Beacon.deserializeBinaryFromReader);
      msg.setBeacon(value);
      break;
    case 3:
      var value = new proto.domain.BeaconEvent.LocationChange;
      reader.readMessage(value,proto.domain.BeaconEvent.LocationChange.deserializeBinaryFromReader);
      msg.setLocationChange(value);
      break;
    case 4:
      var value = new proto.domain.BeaconEvent.SpeedError;
      reader.readMessage(value,proto.domain.BeaconEvent.SpeedError.deserializeBinaryFromReader);
      msg.setSpeedError(value);
      break;
    case 5:
      var value = new proto.domain.BeaconEvent.GatePassError;
      reader.readMessage(value,proto.domain.BeaconEvent.GatePassError.deserializeBinaryFromReader);
      msg.setGatePassError(value);
      break;
    case 6:
      var value = new proto.domain.BeaconEvent.InvalidLocationChange;
      reader.readMessage(value,proto.domain.BeaconEvent.InvalidLocationChange.deserializeBinaryFromReader);
      msg.setInvalidLocationChange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.BeaconEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.BeaconEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.BeaconEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getBeacon();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.domain.Beacon.serializeBinaryToWriter
    );
  }
  f = message.getLocationChange();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.domain.BeaconEvent.LocationChange.serializeBinaryToWriter
    );
  }
  f = message.getSpeedError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.domain.BeaconEvent.SpeedError.serializeBinaryToWriter
    );
  }
  f = message.getGatePassError();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.domain.BeaconEvent.GatePassError.serializeBinaryToWriter
    );
  }
  f = message.getInvalidLocationChange();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.domain.BeaconEvent.InvalidLocationChange.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.BeaconEvent.LocationChange.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.BeaconEvent.LocationChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.BeaconEvent.LocationChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconEvent.LocationChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    previousZone: jspb.Message.getFieldWithDefault(msg, 1, ""),
    zone: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.BeaconEvent.LocationChange}
 */
proto.domain.BeaconEvent.LocationChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.BeaconEvent.LocationChange;
  return proto.domain.BeaconEvent.LocationChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.BeaconEvent.LocationChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.BeaconEvent.LocationChange}
 */
proto.domain.BeaconEvent.LocationChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousZone(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setZone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.BeaconEvent.LocationChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.BeaconEvent.LocationChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.BeaconEvent.LocationChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconEvent.LocationChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreviousZone();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getZone();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string previous_zone = 1;
 * @return {string}
 */
proto.domain.BeaconEvent.LocationChange.prototype.getPreviousZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.BeaconEvent.LocationChange} returns this
 */
proto.domain.BeaconEvent.LocationChange.prototype.setPreviousZone = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string zone = 2;
 * @return {string}
 */
proto.domain.BeaconEvent.LocationChange.prototype.getZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.BeaconEvent.LocationChange} returns this
 */
proto.domain.BeaconEvent.LocationChange.prototype.setZone = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.BeaconEvent.SpeedError.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.BeaconEvent.SpeedError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.BeaconEvent.SpeedError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconEvent.SpeedError.toObject = function(includeInstance, msg) {
  var f, obj = {
    previousZone: jspb.Message.getFieldWithDefault(msg, 1, ""),
    zone: jspb.Message.getFieldWithDefault(msg, 2, ""),
    speed: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    maxSpeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.BeaconEvent.SpeedError}
 */
proto.domain.BeaconEvent.SpeedError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.BeaconEvent.SpeedError;
  return proto.domain.BeaconEvent.SpeedError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.BeaconEvent.SpeedError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.BeaconEvent.SpeedError}
 */
proto.domain.BeaconEvent.SpeedError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousZone(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setZone(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxSpeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.BeaconEvent.SpeedError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.BeaconEvent.SpeedError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.BeaconEvent.SpeedError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconEvent.SpeedError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreviousZone();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getZone();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getMaxSpeed();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional string previous_zone = 1;
 * @return {string}
 */
proto.domain.BeaconEvent.SpeedError.prototype.getPreviousZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.BeaconEvent.SpeedError} returns this
 */
proto.domain.BeaconEvent.SpeedError.prototype.setPreviousZone = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string zone = 2;
 * @return {string}
 */
proto.domain.BeaconEvent.SpeedError.prototype.getZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.BeaconEvent.SpeedError} returns this
 */
proto.domain.BeaconEvent.SpeedError.prototype.setZone = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional float speed = 4;
 * @return {number}
 */
proto.domain.BeaconEvent.SpeedError.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domain.BeaconEvent.SpeedError} returns this
 */
proto.domain.BeaconEvent.SpeedError.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float max_speed = 5;
 * @return {number}
 */
proto.domain.BeaconEvent.SpeedError.prototype.getMaxSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domain.BeaconEvent.SpeedError} returns this
 */
proto.domain.BeaconEvent.SpeedError.prototype.setMaxSpeed = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.BeaconEvent.GatePassError.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.BeaconEvent.GatePassError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.BeaconEvent.GatePassError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconEvent.GatePassError.toObject = function(includeInstance, msg) {
  var f, obj = {
    previousZone: jspb.Message.getFieldWithDefault(msg, 2, ""),
    zone: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.BeaconEvent.GatePassError}
 */
proto.domain.BeaconEvent.GatePassError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.BeaconEvent.GatePassError;
  return proto.domain.BeaconEvent.GatePassError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.BeaconEvent.GatePassError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.BeaconEvent.GatePassError}
 */
proto.domain.BeaconEvent.GatePassError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousZone(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setZone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.BeaconEvent.GatePassError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.BeaconEvent.GatePassError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.BeaconEvent.GatePassError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconEvent.GatePassError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreviousZone();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getZone();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string previous_zone = 2;
 * @return {string}
 */
proto.domain.BeaconEvent.GatePassError.prototype.getPreviousZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.BeaconEvent.GatePassError} returns this
 */
proto.domain.BeaconEvent.GatePassError.prototype.setPreviousZone = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string zone = 3;
 * @return {string}
 */
proto.domain.BeaconEvent.GatePassError.prototype.getZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.BeaconEvent.GatePassError} returns this
 */
proto.domain.BeaconEvent.GatePassError.prototype.setZone = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.BeaconEvent.InvalidLocationChange.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.BeaconEvent.InvalidLocationChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.BeaconEvent.InvalidLocationChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconEvent.InvalidLocationChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    previousZone: jspb.Message.getFieldWithDefault(msg, 2, ""),
    zone: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.BeaconEvent.InvalidLocationChange}
 */
proto.domain.BeaconEvent.InvalidLocationChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.BeaconEvent.InvalidLocationChange;
  return proto.domain.BeaconEvent.InvalidLocationChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.BeaconEvent.InvalidLocationChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.BeaconEvent.InvalidLocationChange}
 */
proto.domain.BeaconEvent.InvalidLocationChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousZone(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setZone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.BeaconEvent.InvalidLocationChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.BeaconEvent.InvalidLocationChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.BeaconEvent.InvalidLocationChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.BeaconEvent.InvalidLocationChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreviousZone();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getZone();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string previous_zone = 2;
 * @return {string}
 */
proto.domain.BeaconEvent.InvalidLocationChange.prototype.getPreviousZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.BeaconEvent.InvalidLocationChange} returns this
 */
proto.domain.BeaconEvent.InvalidLocationChange.prototype.setPreviousZone = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string zone = 3;
 * @return {string}
 */
proto.domain.BeaconEvent.InvalidLocationChange.prototype.getZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.BeaconEvent.InvalidLocationChange} returns this
 */
proto.domain.BeaconEvent.InvalidLocationChange.prototype.setZone = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp time = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.domain.BeaconEvent.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.domain.BeaconEvent} returns this
*/
proto.domain.BeaconEvent.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.BeaconEvent} returns this
 */
proto.domain.BeaconEvent.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.BeaconEvent.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Beacon beacon = 2;
 * @return {?proto.domain.Beacon}
 */
proto.domain.BeaconEvent.prototype.getBeacon = function() {
  return /** @type{?proto.domain.Beacon} */ (
    jspb.Message.getWrapperField(this, proto.domain.Beacon, 2));
};


/**
 * @param {?proto.domain.Beacon|undefined} value
 * @return {!proto.domain.BeaconEvent} returns this
*/
proto.domain.BeaconEvent.prototype.setBeacon = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.BeaconEvent} returns this
 */
proto.domain.BeaconEvent.prototype.clearBeacon = function() {
  return this.setBeacon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.BeaconEvent.prototype.hasBeacon = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LocationChange location_change = 3;
 * @return {?proto.domain.BeaconEvent.LocationChange}
 */
proto.domain.BeaconEvent.prototype.getLocationChange = function() {
  return /** @type{?proto.domain.BeaconEvent.LocationChange} */ (
    jspb.Message.getWrapperField(this, proto.domain.BeaconEvent.LocationChange, 3));
};


/**
 * @param {?proto.domain.BeaconEvent.LocationChange|undefined} value
 * @return {!proto.domain.BeaconEvent} returns this
*/
proto.domain.BeaconEvent.prototype.setLocationChange = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.domain.BeaconEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.BeaconEvent} returns this
 */
proto.domain.BeaconEvent.prototype.clearLocationChange = function() {
  return this.setLocationChange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.BeaconEvent.prototype.hasLocationChange = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SpeedError speed_error = 4;
 * @return {?proto.domain.BeaconEvent.SpeedError}
 */
proto.domain.BeaconEvent.prototype.getSpeedError = function() {
  return /** @type{?proto.domain.BeaconEvent.SpeedError} */ (
    jspb.Message.getWrapperField(this, proto.domain.BeaconEvent.SpeedError, 4));
};


/**
 * @param {?proto.domain.BeaconEvent.SpeedError|undefined} value
 * @return {!proto.domain.BeaconEvent} returns this
*/
proto.domain.BeaconEvent.prototype.setSpeedError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.domain.BeaconEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.BeaconEvent} returns this
 */
proto.domain.BeaconEvent.prototype.clearSpeedError = function() {
  return this.setSpeedError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.BeaconEvent.prototype.hasSpeedError = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional GatePassError gate_pass_error = 5;
 * @return {?proto.domain.BeaconEvent.GatePassError}
 */
proto.domain.BeaconEvent.prototype.getGatePassError = function() {
  return /** @type{?proto.domain.BeaconEvent.GatePassError} */ (
    jspb.Message.getWrapperField(this, proto.domain.BeaconEvent.GatePassError, 5));
};


/**
 * @param {?proto.domain.BeaconEvent.GatePassError|undefined} value
 * @return {!proto.domain.BeaconEvent} returns this
*/
proto.domain.BeaconEvent.prototype.setGatePassError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.domain.BeaconEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.BeaconEvent} returns this
 */
proto.domain.BeaconEvent.prototype.clearGatePassError = function() {
  return this.setGatePassError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.BeaconEvent.prototype.hasGatePassError = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional InvalidLocationChange invalid_location_change = 6;
 * @return {?proto.domain.BeaconEvent.InvalidLocationChange}
 */
proto.domain.BeaconEvent.prototype.getInvalidLocationChange = function() {
  return /** @type{?proto.domain.BeaconEvent.InvalidLocationChange} */ (
    jspb.Message.getWrapperField(this, proto.domain.BeaconEvent.InvalidLocationChange, 6));
};


/**
 * @param {?proto.domain.BeaconEvent.InvalidLocationChange|undefined} value
 * @return {!proto.domain.BeaconEvent} returns this
*/
proto.domain.BeaconEvent.prototype.setInvalidLocationChange = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.domain.BeaconEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domain.BeaconEvent} returns this
 */
proto.domain.BeaconEvent.prototype.clearInvalidLocationChange = function() {
  return this.setInvalidLocationChange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domain.BeaconEvent.prototype.hasInvalidLocationChange = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.User.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lastName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    email: jspb.Message.getFieldWithDefault(msg, 3, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.User}
 */
proto.domain.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.User;
  return proto.domain.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.User}
 */
proto.domain.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirstName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string first_name = 1;
 * @return {string}
 */
proto.domain.User.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.User} returns this
 */
proto.domain.User.prototype.setFirstName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string last_name = 2;
 * @return {string}
 */
proto.domain.User.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.User} returns this
 */
proto.domain.User.prototype.setLastName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.domain.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.User} returns this
 */
proto.domain.User.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string phone = 4;
 * @return {string}
 */
proto.domain.User.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.domain.User} returns this
 */
proto.domain.User.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.domain);
